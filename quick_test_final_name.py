#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–ª—è final_name –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import pandas as pd
from pathlib import Path
import sys

sys.path.append(str(Path(__file__).parent))
from data_processor import DataProcessor, ProcessingConfig

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç final_name"""
    
    print("üöÄ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–æ–ª—è final_name")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∏–º 10 –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    input_file = "src/data/input/main_dataset.xlsx"
    
    if not Path(input_file).exists():
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    df = pd.read_excel(input_file)
    sample_df = df.head(10).copy()
    
    config = ProcessingConfig(batch_size=20, include_statistics=False, include_metadata=False)
    processor = DataProcessor(config)
    processor.original_df = sample_df
    
    processed_df = await processor.process_data()
    
    print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ò—Å—Ö–æ–¥–Ω–æ–µ ‚Üí Final Name):")
    print("-" * 80)
    
    for idx, row in processed_df.iterrows():
        original = row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
        final = row['final_name']
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–µ–ø–µ–Ω—å —Å–∂–∞—Ç–∏—è
        compression = (len(original) - len(final)) / len(original) * 100
        
        print(f"\n{idx + 1:2d}. –ò—Å—Ö–æ–¥–Ω–æ–µ ({len(original)} —Å–∏–º–≤–æ–ª–æ–≤):")
        print(f"    {original}")
        print(f"    üéØ Final ({len(final)} —Å–∏–º–≤–æ–ª–æ–≤, —Å–∂–∞—Ç–∏–µ {compression:.1f}%):")
        print(f"    {final}")
        
        if row['model_brand']:
            print(f"    üè∑Ô∏è  –ë—Ä–µ–Ω–¥: {row['model_brand']}")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    avg_original = processed_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.len().mean()
    avg_final = processed_df['final_name'].str.len().mean()
    avg_compression = (avg_original - avg_final) / avg_original * 100
    
    print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ: {avg_original:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ final_name: {avg_final:.1f} —Å–∏–º–≤–æ–ª–æ–≤")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ —Å–∂–∞—Ç–∏–µ: {avg_compression:.1f}%")
    
    print("\n‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    asyncio.run(quick_test())

