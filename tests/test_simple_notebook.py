#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ notebook –∫–∞–∫ Python —Å–∫—Ä–∏–ø—Ç–∞
"""

import sys
import os
import time
from datetime import datetime
from typing import List, Dict, Any

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º SAMe
sys.path.append(os.path.abspath('.'))

def main():
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —è—á–µ–π–∫–∏ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ notebook"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ SAMe Notebook")
    print("=" * 60)
    
    # –Ø—á–µ–π–∫–∞ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç—ã
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 1: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç—ã")
    print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üïê –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –Ø—á–µ–π–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 2: –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    def create_sample_mtr_data():
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ú–¢–†"""
        
        sample_data = [
            # –ö—Ä–µ–ø–µ–∂–Ω—ã–µ –∏–∑–¥–µ–ª–∏—è
            "–ë–æ–ª—Ç –ú10√ó50 –ì–û–°–¢ 7798-70 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "–ë–æ–ª—Ç —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–æ–π –≥–æ–ª–æ–≤–∫–æ–π –ú12√ó60 DIN 933 –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å A2",
            "–í–∏–Ω—Ç –ú8√ó30 —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∏–∫–æ–º –ì–û–°–¢ 11738-84",
            "–ì–∞–π–∫–∞ –ú10 —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è –ì–û–°–¢ 5915-70 –∫–ª–∞—Å—Å –ø—Ä–æ—á–Ω–æ—Å—Ç–∏ 8",
            "–ì–∞–π–∫–∞ –ú12 DIN 934 –Ω–µ—Ä–∂–∞–≤–µ—é—â–∞—è —Å—Ç–∞–ª—å A4",
            "–®–∞–π–±–∞ –ø–ª–æ—Å–∫–∞—è 10 –ì–û–°–¢ 11371-78 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω–∞—è",
            
            # –≠–ª–µ–∫—Ç—Ä–æ–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ
            "–î–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ê–ò–†80–í2 1.5–∫–í—Ç 3000–æ–±/–º–∏–Ω 220/380–í",
            "–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å 4–ê–ú100L4 4–∫–í—Ç 1500–æ–±/–º–∏–Ω –ª–∞–ø—ã",
            "–ö–∞–±–µ–ª—å –í–í–ì 3√ó2.5 –º–º¬≤ 0.66–∫–í –º–µ–¥–Ω—ã–π",
            "–ü—Ä–æ–≤–æ–¥ –ü–í–° 2√ó1.5 –º–º¬≤ –≥–∏–±–∫–∏–π –º–µ–¥–Ω—ã–π",
            
            # –¢—Ä—É–±–æ–ø—Ä–æ–≤–æ–¥–Ω–∞—è –∞—Ä–º–∞—Ç—É—Ä–∞
            "–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57√ó3.5 –ì–û–°–¢ 8732-78 –±–µ—Å—à–æ–≤–Ω–∞—è",
            "–¢—Ä—É–±–∞ –ø–æ–ª–∏–ø—Ä–æ–ø–∏–ª–µ–Ω–æ–≤–∞—è PN20 32√ó5.4 –¥–ª—è –≥–æ—Ä—è—á–µ–π –≤–æ–¥—ã",
            "–ö–ª–∞–ø–∞–Ω —à–∞—Ä–æ–≤–æ–π –î–£25 –†–£40 –º—É—Ñ—Ç–æ–≤—ã–π –ª–∞—Ç—É–Ω—å",
            
            # –ù–∞—Å–æ—Å—ã –∏ –∏–∑–º–µ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–∏–±–æ—Ä—ã
            "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π –ö50-32-125 –ø–æ–¥–∞—á–∞ 12.5–º¬≥/—á –Ω–∞–ø–æ—Ä 20–º",
            "–ú–∞–Ω–æ–º–µ—Ç—Ä –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π –ú–ü3-–£ 0-10 –∫–≥—Å/—Å–º¬≤ –ú20√ó1.5"
        ]
        
        return sample_data

    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    sample_mtr_data = create_sample_mtr_data()

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(sample_mtr_data)} –æ–±—Ä–∞–∑—Ü–æ–≤ –ú–¢–† –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏")
    print("\nüìã –ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:")
    for i, item in enumerate(sample_mtr_data[:5], 1):
        print(f"{i}. {item}")
    print("...")
    
    # –Ø—á–µ–π–∫–∞ 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 3: –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
    print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è RegexParameterExtractor")
    print("=" * 50)

    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        from same.parameter_extraction.regex_extractor import RegexParameterExtractor
        
        # –°–æ–∑–¥–∞–µ–º —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä
        extractor = RegexParameterExtractor()
        
        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameter_samples = [
            "–ë–æ–ª—Ç –ú10√ó50 –ì–û–°–¢ 7798-70 –¥–∏–∞–º–µ—Ç—Ä 10–º–º –¥–ª–∏–Ω–∞ 50–º–º",
            "–î–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π 4–∫–í—Ç 1500–æ–±/–º–∏–Ω –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 380–í",
            "–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57√ó3.5 –¥–∏–∞–º–µ—Ç—Ä 57–º–º —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ 3.5–º–º",
            "–ö–∞–±–µ–ª—å –í–í–ì 3√ó2.5–º–º¬≤ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 0.66–∫–í —Å–µ—á–µ–Ω–∏–µ 2.5–º–º¬≤",
            "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π –ø–æ–¥–∞—á–∞ 12.5–º¬≥/—á –Ω–∞–ø–æ—Ä 20–º –º–æ—â–Ω–æ—Å—Ç—å 1.1–∫–í—Ç"
        ]
        
        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        extraction_results = []
        
        for i, text in enumerate(parameter_samples, 1):
            parameters = extractor.extract_parameters(text)
            extraction_results.append({
                'text': text,
                'parameters': parameters
            })
            
            print(f"\n{i}. –¢–µ–∫—Å—Ç: '{text}'")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {len(parameters)}")
            
            for param in parameters:
                print(f"   - {param.name}: {param.value} {param.unit or ''} ({param.parameter_type.value})")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è
        total_params = sum(len(r['parameters']) for r in extraction_results)
        param_types = {}
        
        for result in extraction_results:
            for param in result['parameters']:
                param_type = param.parameter_type.value
                param_types[param_type] = param_types.get(param_type, 0) + 1
        
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤:")
        print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")
        print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ —Ç–µ–∫—Å—Ç: {total_params/len(parameter_samples):.1f}")
        print(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Ç–∏–ø–∞–º:")
        for param_type, count in param_types.items():
            print(f"  - {param_type}: {count}")
        
        print("\n‚úÖ RegexParameterExtractor —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {e}")
        extraction_results = []
    
    # –Ø—á–µ–π–∫–∞ 4: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–∞–ª–æ–≥–∞
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 4: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    print("üìö –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞")
    print("=" * 50)

    def create_extended_catalog():
        """–°–æ–∑–¥–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –ú–¢–† —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏"""
        
        catalog_data = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        for i, item in enumerate(sample_mtr_data):
            catalog_data.append({
                'id': i + 1,
                'name': item,
                'category': '–ú–¢–†',
                'description': f'–û–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {item}'
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        additional_items = [
            "–ë–æ–ª—Ç –ú10 –¥–ª–∏–Ω–∞ 50–º–º –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "–ë–æ–ª—Ç –º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π 10—Ö50 –ì–û–°–¢",
            "–í–∏–Ω—Ç –ú10—Ö50 —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–æ–π –≥–æ–ª–æ–≤–∫–æ–π",
            "–î–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π 1.5–∫–í—Ç 3000–æ–±/–º–∏–Ω",
            "–ú–æ—Ç–æ—Ä –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π 1500–í—Ç —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π",
            "–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–º–µ—Ç—Ä 57–º–º",
            "–¢—Ä—É–±–∫–∞ –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∞—è 57—Ö3.5",
            "–ù–∞—Å–æ—Å –≤–æ–¥—è–Ω–æ–π —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 12–º¬≥/—á"
        ]
        
        for i, item in enumerate(additional_items):
            catalog_data.append({
                'id': len(sample_mtr_data) + i + 1,
                'name': item,
                'category': '–ú–¢–†',
                'description': f'–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è {item}'
            })
        
        return catalog_data

    # –°–æ–∑–¥–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥
    catalog_data = create_extended_catalog()
    documents = [item['name'] for item in catalog_data]
    document_ids = [item['id'] for item in catalog_data]

    print(f"‚úÖ –°–æ–∑–¥–∞–Ω –∫–∞—Ç–∞–ª–æ–≥ –∏–∑ {len(catalog_data)} –ø–æ–∑–∏—Ü–∏–π")
    print(f"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–∏—Å–∫–∞:")
    print(f"–î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
    print(f"ID –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(document_ids)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∫–∞—Ç–∞–ª–æ–≥–∞
    print(f"\nüìã –ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    for i, item in enumerate(catalog_data[:5], 1):
        print(f"{i}. ID:{item['id']} - {item['name'][:50]}...")
    
    # –Ø—á–µ–π–∫–∞ 5: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 5: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤")
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤")
    print("=" * 50)

    def simple_search(query: str, documents: List[str], document_ids: List[int], max_results: int = 5):
        """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–∞–º –∏ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º"""
        
        matches = []
        query_lower = query.lower()
        query_words = query_lower.split()
        
        for i, doc in enumerate(documents):
            doc_lower = doc.lower()
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            word_matches = sum(1 for word in query_words if word in doc_lower)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å–∫–æ—Ä
            if word_matches > 0:
                score = word_matches / len(query_words)
                
                # –ë–æ–Ω—É—Å –∑–∞ —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                if query_lower in doc_lower:
                    score += 0.5
                
                matches.append({
                    'document_id': document_ids[i],
                    'document': doc,
                    'score': score,
                    'word_matches': word_matches
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å–∫–æ—Ä—É
        matches.sort(key=lambda x: x['score'], reverse=True)
        
        return matches[:max_results]

    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        "–±–æ–ª—Ç –º10",
        "–¥–≤–∏–≥–∞—Ç–µ–ª—å 1.5–∫–í—Ç",
        "—Ç—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57",
        "–Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π",
        "–∫–∞–±–µ–ª—å –º–µ–¥–Ω—ã–π"
    ]

    print("\nüìù –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞:")
    search_results = {}

    for query in test_queries:
        start_time = time.time()
        results = simple_search(query, documents, document_ids)
        search_time = time.time() - start_time
        
        search_results[query] = results
        
        print(f"\nüîç –ó–∞–ø—Ä–æ—Å: '{query}'")
        print(f"   –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {search_time*1000:.1f}–º—Å")
        print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
        
        for i, result in enumerate(results[:3], 1):
            print(f"   {i}. {result['document'][:60]}... (—Å–∫–æ—Ä: {result['score']:.2f})")

    print("\n‚úÖ –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    
    # –Ø—á–µ–π–∫–∞ 6: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 6: –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print("üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")
    print("=" * 50)

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞
    total_results = sum(len(results) for results in search_results.values())
    avg_results = total_results / len(search_results) if search_results else 0

    print(f"\nüìà –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(search_results)}")
    print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_results}")
    print(f"–°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ –∑–∞–ø—Ä–æ—Å: {avg_results:.1f}")
    print(f"–†–∞–∑–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞: {len(documents)}")

    # –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    print(f"\nüéØ –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º:")

    for query, results in search_results.items():
        if results:
            avg_score = sum(r['score'] for r in results) / len(results)
            max_score = max(r['score'] for r in results)
            
            print(f"\nüìù –ó–∞–ø—Ä–æ—Å: '{query}'")
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}")
            print(f"   –°—Ä–µ–¥–Ω–∏–π —Å–∫–æ—Ä: {avg_score:.2f}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Å–∫–æ—Ä: {max_score:.2f}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            best_result = results[0]
            print(f"   –õ—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: '{best_result['document'][:50]}...'")

    print("\n‚úÖ –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    # –Ø—á–µ–π–∫–∞ 7: –í—ã–≤–æ–¥—ã
    print("\nüì¶ –Ø—á–µ–π–∫–∞ 7: –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    print("üéØ –í—ã–≤–æ–¥—ã –ø–æ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã SAMe")
    print("=" * 60)

    print("\n‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
    print("   üìã –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ú–¢–†")
    print("   üîß –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ RegexParameterExtractor")
    print("   üìö –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å –≤–∞—Ä–∏–∞—Ü–∏—è–º–∏")
    print("   üîç –ü—Ä–æ—Å—Ç–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤")
    print("   üìä –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞")

    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏:")
    print(f"   –¢–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ú–¢–†: {len(sample_mtr_data)}")
    print(f"   –†–∞–∑–º–µ—Ä –∫–∞—Ç–∞–ª–æ–≥–∞: {len(documents)}")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {len(search_results)}")

    total_found = sum(len(results) for results in search_results.values())
    print(f"   –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {total_found}")

    if 'extraction_results' in locals():
        total_params = sum(len(r['parameters']) for r in extraction_results)
        print(f"   –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_params}")

    print(f"\nüéâ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã SAMe –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìö –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —Å–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –≤ –ø–∞–ø–∫–µ docs/")
    
    return {
        'sample_data_count': len(sample_mtr_data),
        'catalog_size': len(documents),
        'queries_processed': len(search_results),
        'total_results_found': total_found,
        'parameters_extracted': total_params if 'extraction_results' in locals() else 0
    }


if __name__ == "__main__":
    results = main()
    print(f"\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: {results}")
