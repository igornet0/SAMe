#!/usr/bin/env python3
"""
Test the exact TextNormalizer cell from the fixed SAMe_Demo.ipynb notebook
"""

import sys
import os

# Add path to modules
sys.path.append(os.path.abspath('.'))

def test_exact_notebook_cell():
    """Test the exact code from the fixed notebook cell"""
    print("üß™ Testing Exact Notebook Cell - TextNormalizer")
    print("=" * 60)
    
    try:
        # Import exactly as in notebook
        from same.text_processing.normalizer import TextNormalizer, NormalizerConfig
        
        # Execute the exact code from the FIXED notebook cell
        print("üîß –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è TextNormalizer")
        print("=" * 50)

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏ —ç–∫–∑–µ–º–ø–ª—è—Ä –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ç–æ—Ä–∞
        normalizer_config = NormalizerConfig(
            standardize_units=True,
            normalize_abbreviations=True,
            unify_technical_terms=True
        )

        text_normalizer = TextNormalizer(normalizer_config)

        # –ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        normalization_samples = [
            "–ë–æ–ª—Ç –ú10√ó50 –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –ì–û–°–¢ 7798-70 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "–î–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π 4 –∫–∏–ª–æ–≤–∞—Ç—Ç–∞ 1500 –æ–±–æ—Ä–æ—Ç–æ–≤ –≤ –º–∏–Ω—É—Ç—É",
            "–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –¥–∏–∞–º–µ—Ç—Ä 57 –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞ —Ç–æ–ª—â–∏–Ω–∞ —Å—Ç–µ–Ω–∫–∏ 3.5–º–º",
            "–ö–∞–±–µ–ª—å –º–µ–¥–Ω—ã–π 3√ó2.5 –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ 0.66–∫–í",
            "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π –ø–æ–¥–∞—á–∞ 12.5 –∫—É–±–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç—Ä–∞ –≤ —á–∞—Å"
        ]

        print("\nüìù –ü—Ä–∏–º–µ—Ä—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞:")
        normalization_results = []

        for i, sample in enumerate(normalization_samples, 1):
            result = text_normalizer.normalize_text(sample)
            normalization_results.append(result)
            
            print(f"\n{i}. –ò—Å—Ö–æ–¥–Ω—ã–π: '{sample}'")
            print(f"   –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π: '{result['final_normalized']}'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —ç—Ç–∞–ø—ã –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
            if result['units_normalized'] != result['original'].lower():
                print(f"   –ï–¥–∏–Ω–∏—Ü—ã: '{result['units_normalized']}'")
            if result['abbreviations_normalized'] != result['units_normalized']:
                print(f"   –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä—ã: '{result['abbreviations_normalized']}'")
            if result['terms_unified'] != result['abbreviations_normalized']:
                print(f"   –¢–µ—Ä–º–∏–Ω—ã: '{result['terms_unified']}'")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
        total_original_length = sum(len(r['original']) for r in normalization_results)
        total_normalized_length = sum(len(r['final_normalized']) for r in normalization_results)
        compression_ratio = (total_original_length - total_normalized_length) / total_original_length * 100

        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏:")
        print(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –æ–±—Ä–∞–∑—Ü–æ–≤: {len(normalization_results)}")
        print(f"–û–±—â–µ–µ —Å–∂–∞—Ç–∏–µ —Ç–µ–∫—Å—Ç–∞: {compression_ratio:.1f}%")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –¥–æ: {total_original_length/len(normalization_results):.1f} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"–°—Ä–µ–¥–Ω—è—è –¥–ª–∏–Ω–∞ –ø–æ—Å–ª–µ: {total_normalized_length/len(normalization_results):.1f} —Å–∏–º–≤–æ–ª–æ–≤")

        print("\n‚úÖ TextNormalizer —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error in notebook cell execution: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_configuration_details():
    """Test the configuration in detail"""
    print("\nüß™ Testing Configuration Details")
    print("=" * 50)
    
    try:
        from same.text_processing.normalizer import NormalizerConfig
        
        # Test the exact configuration from notebook
        config = NormalizerConfig(
            standardize_units=True,
            normalize_abbreviations=True,
            unify_technical_terms=True
        )
        
        print("üìã Configuration created successfully:")
        print(f"   standardize_units: {config.standardize_units}")
        print(f"   normalize_abbreviations: {config.normalize_abbreviations}")
        print(f"   unify_technical_terms: {config.unify_technical_terms}")
        
        # Check default values for other parameters
        print(f"   remove_brand_names: {config.remove_brand_names} (default)")
        print(f"   standardize_numbers: {config.standardize_numbers} (default)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Configuration test failed: {e}")
        return False

def test_normalization_functionality():
    """Test specific normalization functionality"""
    print("\nüß™ Testing Normalization Functionality")
    print("=" * 50)
    
    try:
        from same.text_processing.normalizer import TextNormalizer, NormalizerConfig
        
        # Test each configuration option individually
        
        # Test 1: Units standardization
        print("1Ô∏è‚É£ Testing units standardization...")
        units_config = NormalizerConfig(
            standardize_units=True,
            normalize_abbreviations=False,
            unify_technical_terms=False
        )
        units_normalizer = TextNormalizer(units_config)
        
        units_test = "–ë–æ–ª—Ç –¥–ª–∏–Ω–æ–π 50 –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ –∏ –¥–∏–∞–º–µ—Ç—Ä–æ–º 10 –º–∏–ª–ª–∏–º–µ—Ç—Ä–∞"
        units_result = units_normalizer.normalize_text(units_test)
        print(f"   Input: '{units_test}'")
        print(f"   Output: '{units_result['final_normalized']}'")
        
        # Test 2: Abbreviations normalization
        print("\n2Ô∏è‚É£ Testing abbreviations normalization...")
        abbrev_config = NormalizerConfig(
            standardize_units=False,
            normalize_abbreviations=True,
            unify_technical_terms=False
        )
        abbrev_normalizer = TextNormalizer(abbrev_config)
        
        abbrev_test = "–î–≤–∏–≥–∞—Ç–µ–ª—å —ç–ª –∞–≤—Ç–æ–º —Å –º–µ—Ö –ø—Ä–∏–≤–æ–¥–æ–º"
        abbrev_result = abbrev_normalizer.normalize_text(abbrev_test)
        print(f"   Input: '{abbrev_test}'")
        print(f"   Output: '{abbrev_result['final_normalized']}'")
        
        # Test 3: Technical terms unification
        print("\n3Ô∏è‚É£ Testing technical terms unification...")
        terms_config = NormalizerConfig(
            standardize_units=False,
            normalize_abbreviations=False,
            unify_technical_terms=True
        )
        terms_normalizer = TextNormalizer(terms_config)
        
        terms_test = "–í–∏–Ω—Ç –∫—Ä–µ–ø–µ–∂–Ω—ã–π –∏ –∫—Ä–µ–ø–µ–∂–Ω—ã–π –±–æ–ª—Ç"
        terms_result = terms_normalizer.normalize_text(terms_test)
        print(f"   Input: '{terms_test}'")
        print(f"   Output: '{terms_result['final_normalized']}'")
        
        print("\n‚úÖ All normalization functionality tests passed")
        return True
        
    except Exception as e:
        print(f"‚ùå Normalization functionality test failed: {e}")
        return False

def main():
    """Run all tests"""
    print("üöÄ Testing Fixed NormalizerConfig in Notebook")
    print("=" * 70)
    
    tests = [
        ("Exact Notebook Cell", test_exact_notebook_cell),
        ("Configuration Details", test_configuration_details),
        ("Normalization Functionality", test_normalization_functionality)
    ]
    
    results = []
    for test_name, test_func in tests:
        print(f"\n{'='*70}")
        print(f"üß™ Running: {test_name}")
        print(f"{'='*70}")
        
        result = test_func()
        results.append((test_name, result))
    
    # Final summary
    print(f"\n{'='*70}")
    print("üìä FINAL TEST RESULTS")
    print(f"{'='*70}")
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ PASSED" if result else "‚ùå FAILED"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\nOverall: {passed}/{len(results)} tests passed")
    
    if passed == len(results):
        print("\nüéâ ALL TESTS PASSED!")
        print("\nüìù Summary of the fix:")
        print("   ‚úÖ Fixed parameter names in SAMe_Demo.ipynb:")
        print("      - normalize_units ‚Üí standardize_units")
        print("      - expand_abbreviations ‚Üí normalize_abbreviations")
        print("      - unify_technical_terms ‚Üí unify_technical_terms (unchanged)")
        
        print("\n‚úÖ The notebook cell now works correctly:")
        print("   normalizer_config = NormalizerConfig(")
        print("       standardize_units=True,")
        print("       normalize_abbreviations=True,")
        print("       unify_technical_terms=True")
        print("   )")
        
        print("\nüöÄ Benefits of the fix:")
        print("   ‚Ä¢ No more TypeError when creating NormalizerConfig")
        print("   ‚Ä¢ TextNormalizer demonstration works properly")
        print("   ‚Ä¢ Units standardization: –º–∏–ª–ª–∏–º–µ—Ç—Ä–æ–≤ ‚Üí –º–º")
        print("   ‚Ä¢ Abbreviations expansion: —ç–ª ‚Üí —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π")
        print("   ‚Ä¢ Technical terms unification: –≤–∏–Ω—Ç –∫—Ä–µ–ø–µ–∂–Ω—ã–π ‚Üí –±–æ–ª—Ç")
        
        print("\nüìã The SAMe_Demo.ipynb TextNormalizer section is now fully functional!")
        
        return True
    else:
        print(f"\n‚ùå {len(results) - passed} test(s) failed.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
