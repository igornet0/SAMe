#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ csv –≤ Excel
–ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
"""

import os
import sys
import argparse
import logging
from datetime import datetime
import subprocess


from pathlib import Path

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)


def run_quick_processing(scenario: str, input_file: str, output_file: str = None, threshold: float = 0.5):
    """–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    
    # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏
    scenarios = {
        'fast': {
            'strategy': 'emergency',
            'chunk_size': 10000,
            'workers': 1,
            'description': '–ë—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (5-10 –º–∏–Ω—É—Ç, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        },
        'balanced': {
            'strategy': 'auto',
            'chunk_size': 8000,
            'workers': 4,
            'description': '–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (15-30 –º–∏–Ω—É—Ç, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        },
        'quality': {
            'strategy': 'parallel',
            'chunk_size': 5000,
            'workers': 8,
            'description': '–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ (20-45 –º–∏–Ω—É—Ç, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)'
        },
        'memory_safe': {
            'strategy': 'large_dataset',
            'chunk_size': 15000,
            'workers': 1,
            'description': '–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è –ø–∞–º—è—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ (30-60 –º–∏–Ω—É—Ç, –Ω–∏–∑–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ RAM)'
        }
    }
    
    if scenario not in scenarios:
        logger.error(f"Unknown scenario: {scenario}")
        logger.info(f"Available scenarios: {', '.join(scenarios.keys())}")
        return False
    
    config = scenarios[scenario]
    logger.info(f"üöÄ Running scenario: {scenario}")
    logger.info(f"üìù Description: {config['description']}")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not output_file:
        input_path = Path(input_file)
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"results_{scenario}_{timestamp}.xlsx"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É
    cmd = [
        sys.executable, "process_full_dataset.py",
        input_file,
        "-o", output_file,
        "-s", config['strategy'],
        "-t", str(threshold),
        "--chunk-size", str(config['chunk_size']),
        "--workers", str(config['workers'])
    ]
    
    logger.info(f"Executing: {' '.join(cmd)}")
    
    try:
        result = subprocess.run(cmd, check=True)
        logger.info(f"‚úÖ Processing completed successfully!")
        logger.info(f"üìä Results saved to: {output_file}")
        return True
    except subprocess.CalledProcessError as e:
        logger.error(f"‚ùå Processing failed: {e}")
        return False


def main():
    parser = argparse.ArgumentParser(description='Quick processing of main_dataset_processed.csv to Excel')
    parser.add_argument('scenario', choices=['fast', 'balanced', 'quality', 'memory_safe'],
                       help='Processing scenario')
    parser.add_argument('input_file', nargs='?',
                       default='src/data/output/main_dataset_processed.csv',
                       help='Input CSV file (default: src/data/output/main_dataset_processed.csv)')
    parser.add_argument('-o', '--output', help='Output Excel file')
    parser.add_argument('-t', '--threshold', type=float, default=0.5, help='Similarity threshold')
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
    if not os.path.exists(args.input_file):
        logger.error(f"Input file not found: {args.input_file}")
        return 1
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö
    scenarios_info = {
        'fast': '‚ö° –ë—ã—Å—Ç—Ä–æ (5-10 –º–∏–Ω, —Å—Ä–µ–¥–Ω–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
        'balanced': '‚öñÔ∏è  –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ (15-30 –º–∏–Ω, –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)', 
        'quality': 'üéØ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ (20-45 –º–∏–Ω, –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)',
        'memory_safe': 'üõ°Ô∏è  –ë–µ–∑–æ–ø–∞—Å–Ω–æ –¥–ª—è –ø–∞–º—è—Ç–∏ (30-60 –º–∏–Ω, –Ω–∏–∑–∫–æ–µ RAM)'
    }
    
    logger.info(f"üìã Available scenarios:")
    for scenario, description in scenarios_info.items():
        marker = "üëâ " if scenario == args.scenario else "   "
        logger.info(f"{marker}{scenario}: {description}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
    success = run_quick_processing(args.scenario, args.input_file, args.output, args.threshold)
    
    return 0 if success else 1


if __name__ == "__main__":
    exit(main())
