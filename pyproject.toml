[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "same"
version = "0.1.2"
description = "Search Analog Model Engine - система поиска аналогов МТР"
authors = ["igornet0 <93836464+igornet0@users.noreply.github.com>"]
readme = "README.md"
license = "MIT"
homepage = "https://github.com/igornet0/SAMe"
repository = "https://github.com/igornet0/SAMe"
documentation = "https://github.com/igornet0/SAMe/docs"
keywords = ["search", "analog", "nlp", "machine-learning", "materials"]
packages = [{include = "same", from = "src"}]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Text Processing :: Linguistic",
]

[tool.poetry.dependencies]
python = "^3.9"
# Web framework
fastapi = "^0.115.14"
uvicorn = {extras = ["standard"], version = "^0.35.0"}
# Data processing
pandas = "^2.3.0"
numpy = "^1.24.0"
# Database
sqlalchemy = {extras = ["asyncio"], version = "^2.0.41"}
asyncpg = "^0.30.0"
alembic = "^1.13.0"
# Async utilities
aiofiles = "^24.1.0"
aio-pika = "^9.5.5"
# Configuration and validation
pydantic = "^2.11.7"
pydantic-settings = "^2.10.1"
# Security
passlib = {extras = ["bcrypt"], version = "^1.7.4"}
python-jose = {extras = ["cryptography"], version = "^3.3.0"}
# Excel processing
openpyxl = "^3.1.5"
# Parquet support
pyarrow = "^14.0.0"
# NLP and ML dependencies
spacy = "^3.7.0"
scikit-learn = "^1.3.0"
sentence-transformers = "^2.2.0"
transformers = "^4.30.0"
# Vector search
faiss-cpu = "^1.7.0"
# Text processing
rapidfuzz = "^3.0.0"
# Deep learning
torch = "^2.0.0"
matplotlib = ">=3.5.0,<3.10.0"
seaborn = ">=0.11.0,<0.13.0"
fuzzywuzzy = {extras = ["speedup"], version = "^0.18.0"}
# System monitoring
psutil = "^5.9.0"
# Form data handling
python-multipart = "^0.0.6"

[tool.poetry.group.dev.dependencies]
# Development tools
ipykernel = "^6.29.5"
jupyter = "^1.0.0"
black = "^23.0.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.0.0"
pre-commit = "^3.0.0"
plotly = "^6.2.0"
# Testing
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.0.0"
# Documentation
mkdocs = "^1.5.0"
mkdocs-material = "^9.0.0"

[tool.poetry.group.test.dependencies]
pytest = "^7.0.0"
pytest-cov = "^4.0.0"
pytest-asyncio = "^0.21.0"
pytest-mock = "^3.10.0"
pytest-xdist = "^3.0.0"
factory-boy = "^3.3.0"
faker = "^19.0.0"

[tool.poetry.scripts]
same-server = "same.api.create_app:main"
same-cli = "same.utils.cli:main"

# Инструменты разработки
[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["same"]
src_paths = ["src", "tests"]

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["src/same"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/migrations/*",
    "*/alembic/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.bandit]
exclude_dirs = [
    "tests",
    ".venv",
    "venv",
    "build",
    "dist",
    ".tox",
    ".git",
    "__pycache__",
    "alembic/versions"
]
skips = [
    "B101",  # assert_used - допустимо в тестах
    "B601",  # paramiko_calls - если используется paramiko
    "B602",  # subprocess_popen_with_shell_equals_true - контролируемое использование
]

