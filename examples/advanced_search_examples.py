#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ –≤ —Å–∏—Å—Ç–µ–º–µ SAMe

–≠—Ç–æ—Ç —Ñ–∞–π–ª –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
–Ω–æ–≤—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ –ø–æ–∏—Å–∫–∞ –∏ –∏—Ö –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ.
"""

import sys
from pathlib import Path

# Add src directory to path for imports
sys.path.insert(0, str(Path(__file__).parent.parent / "src"))

from search_interface import SAMeSearchInterface
from same_clear.search import SearchConfig
import time


def demo_basic_usage():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞"""
    print("üöÄ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞")
    print("=" * 80)
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø–æ–∏—Å–∫–∞
    search_interface = SAMeSearchInterface()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å –¥–∞–Ω–Ω—ã–º–∏
    if not search_interface.initialize():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    stats = search_interface.get_stats()
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {stats.get('total_records', 'N/A')}")
    print(f"   –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤: {stats.get('unique_token_ids', 'N/A')}")
    print(f"   –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –¥–æ—Å—Ç—É–ø–Ω—ã: {stats.get('embeddings_available', False)}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã
    advanced_methods = stats.get('advanced_search_methods', {})
    print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥—ã:")
    for method, available in advanced_methods.items():
        status = "‚úÖ" if available else "‚ùå"
        print(f"   {status} {method}")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        ("—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ LED 50W", "–ü–æ–∏—Å–∫ —Å–≤–µ—Ç–æ–¥–∏–æ–¥–Ω—ã—Ö —Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫–æ–≤"),
        ("–∞–≤—Ç–æ–º–∞—Ç –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π –ê–í–î–¢", "–ü–æ–∏—Å–∫ –∑–∞—â–∏—Ç–Ω–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏–∫–∏"),
        ("–±–æ–ª—Ç –ú10—Ö50 –ì–û–°–¢", "–ü–æ–∏—Å–∫ –∫—Ä–µ–ø–µ–∂–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π"),
        ("–∫–∞–±–µ–ª—å —Å–∏–ª–æ–≤–æ–π –í–í–ì", "–ü–æ–∏—Å–∫ —Å–∏–ª–æ–≤—ã—Ö –∫–∞–±–µ–ª–µ–π")
    ]
    
    print(f"\nüîç –ü—Ä–∏–º–µ—Ä—ã –ø–æ–∏—Å–∫–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏:")
    print("-" * 80)
    
    for query, description in test_queries:
        print(f"\nüìù {description}")
        print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
        print("-" * 40)
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫
        results = search_interface.search(query, method="advanced_hybrid", top_k=3)
        print(f"Advanced Hybrid ({len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤):")
        for i, result in enumerate(results[:2], 1):
            print(f"  {i}. {result.raw_name} (–æ—Ü–µ–Ω–∫–∞: {result.score:.3f})")


def demo_method_comparison():
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞"""
    print("\nüî¨ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞")
    print("=" * 80)
    
    search_interface = SAMeSearchInterface()
    if not search_interface.initialize():
        return
    
    query = "—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫ LED"
    methods = [
        ("token_id", "–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–∫–µ–Ω–∞–º"),
        ("semantic", "–°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫"),
        ("tfidf", "TF-IDF –ø–æ–∏—Å–∫"),
        ("inverted_index", "–û–±—Ä–∞—Ç–Ω—ã–π –∏–Ω–¥–µ–∫—Å"),
        ("prefix", "–ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫"),
        ("advanced_hybrid", "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π")
    ]
    
    print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
    print("-" * 60)
    
    for method, description in methods:
        try:
            start_time = time.time()
            results = search_interface.search_by_method(query, method, top_k=5)
            end_time = time.time()
            
            execution_time = end_time - start_time
            top_score = results[0].score if results else 0.0
            
            print(f"{description:25} | {execution_time:.4f}s | {len(results):2d} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ | –ª—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞: {top_score:.3f}")
            
        except Exception as e:
            print(f"{description:25} | ‚ùå –û—à–∏–±–∫–∞: {str(e)[:30]}...")


def demo_specialized_searches():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤"""
    print("\nüéØ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏")
    print("=" * 80)
    
    search_interface = SAMeSearchInterface()
    if not search_interface.initialize():
        return
    
    # 1. –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫
    print("\n1. –ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ (–ø–æ–∏—Å–∫ –ø–æ –Ω–∞—á–∞–ª—É —Å–ª–æ–≤–∞)")
    print("-" * 50)
    prefixes = ["—Å–≤–µ—Ç", "–∞–≤—Ç–æ", "–∫–∞–±–µ"]
    
    for prefix in prefixes:
        results = search_interface.search_by_method(prefix, "prefix", top_k=3)
        print(f"–ü—Ä–µ—Ñ–∏–∫—Å '{prefix}': {len(results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        for result in results[:2]:
            print(f"  ‚Ä¢ {result.raw_name}")
    
    # 2. TF-IDF –ø–æ–∏—Å–∫ (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏ —Å–ª–æ–≤)
    print("\n2. TF-IDF –ø–æ–∏—Å–∫ (—Ä–∞–Ω–∂–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏)")
    print("-" * 50)
    query = "–∞–≤—Ç–æ–º–∞—Ç –∑–∞—â–∏—Ç—ã —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    results = search_interface.search_by_method(query, "tfidf", top_k=5)
    
    print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
    for i, result in enumerate(results, 1):
        print(f"  {i}. {result.raw_name} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.score:.3f})")
    
    # 3. LSH –ø–æ–∏—Å–∫ (–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö)
    print("\n3. LSH –ø–æ–∏—Å–∫ (–±—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤)")
    print("-" * 50)
    query = "–±–æ–ª—Ç –ú10 DIN 912"
    results = search_interface.search_by_method(query, "lsh", top_k=5)
    
    print(f"–ó–∞–ø—Ä–æ—Å: '{query}'")
    for i, result in enumerate(results, 1):
        print(f"  {i}. {result.raw_name} (—Å—Ö–æ–∂–µ—Å—Ç—å: {result.score:.3f})")


def demo_performance_benchmark():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–Ω—á–º–∞—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    print("\n‚ö° –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    print("=" * 80)
    
    search_interface = SAMeSearchInterface()
    if not search_interface.initialize():
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–µ–Ω—á–º–∞—Ä–∫
    query = "—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä –ø–æ–Ω–∏–∂–∞—é—â–∏–π"
    print(f"–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞: '{query}'")
    print("-" * 60)
    
    benchmark_results = search_interface.benchmark_methods(query, top_k=10)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    sorted_results = sorted(
        [(method, result) for method, result in benchmark_results.items() if result['available']],
        key=lambda x: x[1]['execution_time']
    )
    
    print(f"{'–ú–µ—Ç–æ–¥':<20} {'–í—Ä–µ–º—è (—Å)':<12} {'–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤':<12} {'–õ—É—á—à–∞—è –æ—Ü–µ–Ω–∫–∞':<15}")
    print("-" * 65)
    
    for method, result in sorted_results:
        print(f"{method:<20} {result['execution_time']:<12.4f} {result['results_count']:<12} {result['top_score']:<15.3f}")


def demo_recommendations():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\nüí° –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞")
    print("=" * 80)
    
    search_interface = SAMeSearchInterface()
    if not search_interface.initialize():
        return
    
    query_types = [
        ("general", "–û–±—â–∏–π –ø–æ–∏—Å–∫"),
        ("technical", "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã"),
        ("prefix", "–ü–æ–∏—Å–∫ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å—É"),
        ("similar", "–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö"),
        ("fast", "–ë—ã—Å—Ç—Ä—ã–π –ø–æ–∏—Å–∫")
    ]
    
    print("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –º–µ—Ç–æ–¥–∞ –ø–æ–∏—Å–∫–∞:")
    print("-" * 50)
    
    for query_type, description in query_types:
        rec = search_interface.get_method_recommendations(query_type)
        print(f"\n{description}:")
        print(f"  –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥: {rec['primary']}")
        print(f"  –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã: {', '.join(rec['alternatives'])}")
        print(f"  –û–ø–∏—Å–∞–Ω–∏–µ: {rec['description']}")


def demo_advanced_features():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("\nüî¨ –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏")
    print("=" * 80)
    
    search_interface = SAMeSearchInterface()
    if not search_interface.initialize():
        return
    
    # 1. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–¥—É
    print("\n1. –ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–æ–¥—É")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–æ–¥ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    stats = search_interface.get_stats()
    if stats.get('total_records', 0) > 0:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –¥–ª—è –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è –ø–æ—Ö–æ–∂–∏—Ö
        sample_results = search_interface.search("—Å–≤–µ—Ç–∏–ª—å–Ω–∏–∫", method="semantic", top_k=1)
        if sample_results:
            reference_code = sample_results[0].code
            similar_items = search_interface.search_similar(reference_code, method="semantic", top_k=3)
            
            print(f"–†–µ—Ñ–µ—Ä–µ–Ω—Å–Ω—ã–π —Ç–æ–≤–∞—Ä: {sample_results[0].raw_name}")
            print(f"–ü–æ—Ö–æ–∂–∏–µ —Ç–æ–≤–∞—Ä—ã:")
            for i, item in enumerate(similar_items, 1):
                print(f"  {i}. {item.raw_name} (—Å—Ö–æ–∂–µ—Å—Ç—å: {item.score:.3f})")
    
    # 2. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö
    print("\n2. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞")
    print("-" * 50)
    
    results = search_interface.search("–∞–≤—Ç–æ–º–∞—Ç –∑–∞—â–∏—Ç—ã", method="advanced_hybrid", top_k=2)
    
    for i, result in enumerate(results, 1):
        print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç {i}:")
        print(f"  –ö–æ–¥: {result.code}")
        print(f"  –ù–∞–∑–≤–∞–Ω–∏–µ: {result.raw_name}")
        print(f"  –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {result.score:.3f}")
        print(f"  –¢–∏–ø —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è: {result.match_type}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã
        if hasattr(result, 'method_scores') and result.method_scores:
            print(f"  –î–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏:")
            for method, score in result.method_scores.items():
                if score > 0:
                    print(f"    {method}: {score:.3f}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–µ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π"""
    print("üéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã—Ö –º–µ—Ç–æ–¥–æ–≤ –ø–æ–∏—Å–∫–∞ SAMe")
    print("=" * 80)
    
    try:
        # –ë–∞–∑–æ–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
        demo_basic_usage()
        
        # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç–æ–¥–æ–≤
        demo_method_comparison()
        
        # –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∏
        demo_specialized_searches()
        
        # –ë–µ–Ω—á–º–∞—Ä–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        demo_performance_benchmark()
        
        # –°–∏—Å—Ç–µ–º–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        demo_recommendations()
        
        # –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
        demo_advanced_features()
        
        print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
