#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ SAMe –ø—Ä–æ–µ–∫—Ç–∞ –≤ Docker

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
log() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING: $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR: $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose."
    exit 1
fi

# –ü–µ—Ä–µ—Ö–æ–¥ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/.."

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—Å–∫–∞ –∏ –æ–ø—Ü–∏–π
MODE=${1:-"dev"}
BUILD_OPTION=${2:-"cache"}

case $MODE in
    "dev"|"development")
        COMPOSE_FILE="docker/docker-compose.dev.yml"
        log "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏..."
        ;;
    "prod"|"production")
        COMPOSE_FILE="docker/docker-compose.prod.yml"
        log "–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ production..."
        ;;
    "basic")
        COMPOSE_FILE="docker/docker-compose.yml"
        log "–ó–∞–ø—É—Å–∫ –±–∞–∑–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
        ;;
    *)
        error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º: $MODE"
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [dev|prod|basic] [cache|no-cache|rebuild]"
        echo "  cache    - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à Docker (–±—ã—Å—Ç—Ä–æ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
        echo "  no-cache - –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å –±–µ–∑ –∫—ç—à–∞ (–º–µ–¥–ª–µ–Ω–Ω–æ, –Ω–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ —Å–≤–µ–∂–µ–µ)"
        echo "  rebuild  - –ø–µ—Ä–µ—Å–æ–±—Ä–∞—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã"
        exit 1
        ;;
esac

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
if [ ! -f "$COMPOSE_FILE" ]; then
    error "–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ $COMPOSE_FILE –Ω–µ –Ω–∞–π–¥–µ–Ω"
    exit 1
fi

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
log "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
mkdir -p data/input data/output data/processed logs models temp cache

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è frontend
if [ ! -d "frontend/same-frontend" ]; then
    warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è frontend –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. Frontend –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω."
fi

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker-compose -f "$COMPOSE_FILE" down --remove-orphans

# –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –æ–ø—Ü–∏–∏
case $BUILD_OPTION in
    "no-cache")
        log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ –±–µ–∑ –∫—ç—à–∞ (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)..."
        docker-compose -f "$COMPOSE_FILE" build --no-cache
        ;;
    "rebuild")
        log "–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö –æ–±—Ä–∞–∑–æ–≤..."
        docker-compose -f "$COMPOSE_FILE" build --pull
        ;;
    "cache"|*)
        log "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –∫—ç—à–∞..."
        docker-compose -f "$COMPOSE_FILE" build
        ;;
esac

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f "$COMPOSE_FILE" up -d

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
sleep 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f "$COMPOSE_FILE" ps

# –í—ã–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–∏—Å–∞—Ö
echo ""
log "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã –∏ –¥–æ—Å—Ç—É–ø–Ω—ã –ø–æ —Å–ª–µ–¥—É—é—â–∏–º –∞–¥—Ä–µ—Å–∞–º:"
echo ""

if [ "$MODE" = "dev" ] || [ "$MODE" = "development" ]; then
    echo -e "${BLUE}üöÄ Backend API:${NC} http://localhost:8000"
    echo -e "${BLUE}üåê Frontend:${NC} http://localhost:3000"
    echo -e "${BLUE}üìä PgAdmin:${NC} http://localhost:5050"
    echo -e "${BLUE}üîç Redis Commander:${NC} http://localhost:8081"
    echo -e "${BLUE}üìß Mailhog:${NC} http://localhost:8025"
    echo -e "${BLUE}üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è:${NC} http://localhost:8080"
    echo -e "${BLUE}üìì Jupyter:${NC} http://localhost:8888"
elif [ "$MODE" = "prod" ] || [ "$MODE" = "production" ]; then
    echo -e "${BLUE}üöÄ Backend API:${NC} http://localhost:8000"
    echo -e "${BLUE}üåê Frontend:${NC} http://localhost:3000"
    echo -e "${BLUE}üåê Nginx (Main):${NC} http://localhost:80"
    echo -e "${BLUE}üìä Grafana:${NC} http://localhost:3000"
    echo -e "${BLUE}üìà Prometheus:${NC} http://localhost:9090"
    echo -e "${BLUE}üóÑÔ∏è MinIO:${NC} http://localhost:9000"
else
    echo -e "${BLUE}üöÄ Backend API:${NC} http://localhost:8000"
    echo -e "${BLUE}üåê Frontend:${NC} http://localhost:3000"
    echo -e "${BLUE}üìä PgAdmin:${NC} http://localhost:5050"
fi

echo ""
log "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker-compose -f $COMPOSE_FILE logs -f [service_name]"
log "–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: docker-compose -f $COMPOSE_FILE down"

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
read -p "–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏? (y/N): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    docker-compose -f "$COMPOSE_FILE" logs -f
fi
