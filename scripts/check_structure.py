#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ SAMe
"""

import os
import sys
from pathlib import Path


def check_project_structure():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"""
    project_root = Path(__file__).parent.parent
    
    required_dirs = [
        "src/same",
        "src/same/api",
        "src/same/text_processing",
        "src/same/search_engine", 
        "src/same/parameter_extraction",
        "src/same/export",
        "src/same/database",
        "src/same/utils",
        "tests",
        "config",
        "docs",
        "docker",
        "notebooks/demo",
        "scripts",
    ]
    
    required_files = [
        "src/same/__init__.py",
        "src/same/api/__init__.py",
        "pyproject.toml",
        "README.md",
        "Makefile",
        ".gitignore",
        ".env.example",
        ".pre-commit-config.yaml",
        "requirements.txt",
    ]
    
    missing_dirs = []
    missing_files = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
    for dir_path in required_dirs:
        full_path = project_root / dir_path
        if not full_path.exists():
            missing_dirs.append(dir_path)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_path in required_files:
        full_path = project_root / file_path
        if not full_path.exists():
            missing_files.append(file_path)
    
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if missing_dirs or missing_files:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –ø—Ä–æ–µ–∫—Ç–∞:")
        
        if missing_dirs:
            print("\nüìÅ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏:")
            for dir_path in missing_dirs:
                print(f"  - {dir_path}")
        
        if missing_files:
            print("\nüìÑ –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
            for file_path in missing_files:
                print(f"  - {file_path}")
        
        return False
    else:
        print("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞!")
        return True


def check_imports():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
    try:
        sys.path.insert(0, str(Path(__file__).parent.parent / "src"))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
        import same
        print(f"‚úÖ –û—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥—É–ª—å same –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω (–≤–µ—Ä—Å–∏—è: {same.__version__})")
        
        return True
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        return False


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞ SAMe...\n")
    
    structure_ok = check_project_structure()
    imports_ok = check_imports()
    
    if structure_ok and imports_ok:
        print("\nüéâ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        sys.exit(0)
    else:
        print("\nüí• –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã!")
        sys.exit(1)


if __name__ == "__main__":
    main()
