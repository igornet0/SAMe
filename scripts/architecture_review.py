#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ SAMe
"""

import ast
import importlib
import sys
import time
from pathlib import Path
from typing import Dict, List, Set, Tuple, Any
import warnings


class ArchitectureReviewer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞"""
    
    def __init__(self, project_root: Path):
        self.project_root = project_root
        self.src_dir = project_root / "src"
        self.modules = ['same_core', 'same_clear', 'same_search', 'same_api', 'same']
        
    def check_circular_imports(self) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–∏—Ä–∫—É–ª—è—Ä–Ω—ã—Ö –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        circular_imports = {}
        
        for module_name in self.modules:
            module_path = self.src_dir / module_name
            if not module_path.exists():
                continue
                
            try:
                # –û—á–∏—â–∞–µ–º –∫—ç—à –º–æ–¥—É–ª–µ–π
                modules_to_clear = [name for name in sys.modules.keys() if name.startswith(module_name)]
                for mod_name in modules_to_clear:
                    if mod_name in sys.modules:
                        del sys.modules[mod_name]
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                module = importlib.import_module(module_name)
                print(f"‚úÖ {module_name}: OK")
                
            except ImportError as e:
                if "circular import" in str(e).lower():
                    circular_imports[module_name] = [str(e)]
                    print(f"‚ùå {module_name}: Circular import detected - {e}")
                else:
                    print(f"‚ö†Ô∏è  {module_name}: Import error - {e}")
        
        return circular_imports
    
    def analyze_import_dependencies(self) -> Dict[str, Dict[str, List[str]]]:
        """–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏"""
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏...")
        
        dependencies = {}
        
        for module_name in self.modules:
            module_path = self.src_dir / module_name
            if not module_path.exists():
                continue
                
            dependencies[module_name] = {
                'imports': [],
                'imported_by': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ Python —Ñ–∞–π–ª—ã –≤ –º–æ–¥—É–ª–µ
            for py_file in module_path.rglob("*.py"):
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    tree = ast.parse(content)
                    
                    for node in ast.walk(tree):
                        if isinstance(node, ast.Import):
                            for alias in node.names:
                                if any(alias.name.startswith(mod) for mod in self.modules):
                                    dependencies[module_name]['imports'].append(alias.name)
                        
                        elif isinstance(node, ast.ImportFrom):
                            if node.module and any(node.module.startswith(mod) for mod in self.modules):
                                dependencies[module_name]['imports'].append(node.module)
                
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ {py_file}: {e}")
        
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        for module_name in dependencies:
            dependencies[module_name]['imports'] = list(set(dependencies[module_name]['imports']))
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—Ä–∞—Ç–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        for module_name, deps in dependencies.items():
            for imported_module in deps['imports']:
                base_module = imported_module.split('.')[0]
                if base_module in dependencies:
                    dependencies[base_module]['imported_by'].append(module_name)
        
        return dependencies
    
    def check_interface_compliance(self) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º"""
        print("\nüîå –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º...")
        
        compliance_issues = {}
        
        try:
            from same_core.interfaces import (
                TextProcessorInterface,
                SearchEngineInterface,
                ExporterInterface
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ same_clear
            try:
                from same_clear.text_processing import TextCleaner
                
                issues = []
                if not hasattr(TextCleaner, 'clean_text'):
                    issues.append("TextCleaner missing clean_text method")
                
                if issues:
                    compliance_issues['same_clear.TextCleaner'] = issues
                else:
                    print("‚úÖ same_clear.TextCleaner: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
                    
            except ImportError as e:
                compliance_issues['same_clear.TextCleaner'] = [f"Import error: {e}"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ same_search
            try:
                from same_search.search_engine import FuzzySearchEngine
                
                issues = []
                required_methods = ['fit', 'search']
                for method in required_methods:
                    if not hasattr(FuzzySearchEngine, method):
                        issues.append(f"FuzzySearchEngine missing {method} method")
                
                if issues:
                    compliance_issues['same_search.FuzzySearchEngine'] = issues
                else:
                    print("‚úÖ same_search.FuzzySearchEngine: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
                    
            except ImportError as e:
                compliance_issues['same_search.FuzzySearchEngine'] = [f"Import error: {e}"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –≤ same_api
            try:
                from same_api.export import ExcelExporter
                
                issues = []
                if not hasattr(ExcelExporter, 'export_data'):
                    issues.append("ExcelExporter missing export_data method")
                
                if issues:
                    compliance_issues['same_api.ExcelExporter'] = issues
                else:
                    print("‚úÖ same_api.ExcelExporter: —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É")
                    
            except ImportError as e:
                compliance_issues['same_api.ExcelExporter'] = [f"Import error: {e}"]
        
        except ImportError as e:
            compliance_issues['same_core.interfaces'] = [f"Core interfaces not available: {e}"]
        
        return compliance_issues
    
    def check_backward_compatibility(self) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"""
        print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏...")
        
        compatibility_issues = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        old_imports = [
            'same.text_processing.TextCleaner',
            'same.parameter_extraction.RegexParameterExtractor',
            'same.search_engine.FuzzySearchEngine',
            'same.export.ExcelExporter',
            'same.analog_search_engine.AnalogSearchEngine'
        ]
        
        for import_path in old_imports:
            try:
                module_path, class_name = import_path.rsplit('.', 1)
                
                with warnings.catch_warnings(record=True) as w:
                    warnings.simplefilter("always")
                    
                    module = importlib.import_module(module_path)
                    cls = getattr(module, class_name)
                    
                    if cls is None:
                        compatibility_issues[import_path] = ["Class not found"]
                    else:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤—ã–¥–∞–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ deprecated
                        if w and any("deprecated" in str(warning.message).lower() for warning in w):
                            print(f"‚úÖ {import_path}: —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ–º")
                        else:
                            print(f"‚úÖ {import_path}: —Ä–∞–±–æ—Ç–∞–µ—Ç")
                            
            except ImportError as e:
                compatibility_issues[import_path] = [f"Import failed: {e}"]
            except AttributeError as e:
                compatibility_issues[import_path] = [f"Attribute error: {e}"]
        
        return compatibility_issues
    
    def measure_performance(self) -> Dict[str, float]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤"""
        print("\n‚ö° –ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∏–º–ø–æ—Ä—Ç–æ–≤...")
        
        performance_metrics = {}
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π
        for module_name in self.modules:
            try:
                # –û—á–∏—â–∞–µ–º –∫—ç—à
                modules_to_clear = [name for name in sys.modules.keys() if name.startswith(module_name)]
                for mod_name in modules_to_clear:
                    if mod_name in sys.modules:
                        del sys.modules[mod_name]
                
                # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∏–º–ø–æ—Ä—Ç–∞
                start_time = time.time()
                importlib.import_module(module_name)
                import_time = time.time() - start_time
                
                performance_metrics[module_name] = import_time
                print(f"üìä {module_name}: {import_time:.3f}s")
                
            except ImportError as e:
                print(f"‚ö†Ô∏è  {module_name}: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å - {e}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        try:
            # –û—á–∏—â–∞–µ–º –∫—ç—à
            modules_to_clear = [name for name in sys.modules.keys() if name.startswith('same')]
            for mod_name in modules_to_clear:
                if mod_name in sys.modules:
                    del sys.modules[mod_name]
            
            start_time = time.time()
            from same.text_processing import TextCleaner
            legacy_import_time = time.time() - start_time
            
            performance_metrics['legacy_import'] = legacy_import_time
            print(f"üìä legacy import: {legacy_import_time:.3f}s")
            
        except ImportError:
            print("‚ö†Ô∏è  Legacy import –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        return performance_metrics
    
    def check_code_quality(self) -> Dict[str, List[str]]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞"""
        print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞...")
        
        quality_issues = {}
        
        for module_name in self.modules:
            module_path = self.src_dir / module_name
            if not module_path.exists():
                continue
            
            issues = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ __init__.py
            init_file = module_path / "__init__.py"
            if not init_file.exists():
                issues.append("Missing __init__.py")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ docstrings –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
            for py_file in module_path.rglob("*.py"):
                if py_file.name.startswith('_'):
                    continue
                    
                try:
                    with open(py_file, 'r', encoding='utf-8') as f:
                        content = f.read()
                    
                    tree = ast.parse(content)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstring –º–æ–¥—É–ª—è
                    if not ast.get_docstring(tree):
                        issues.append(f"Missing module docstring in {py_file.name}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º docstrings –∫–ª–∞—Å—Å–æ–≤
                    for node in ast.walk(tree):
                        if isinstance(node, ast.ClassDef):
                            if not ast.get_docstring(node):
                                issues.append(f"Missing class docstring: {node.name} in {py_file.name}")
                
                except Exception as e:
                    issues.append(f"Error analyzing {py_file.name}: {e}")
            
            if issues:
                quality_issues[module_name] = issues
            else:
                print(f"‚úÖ {module_name}: –∫–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞ OK")
        
        return quality_issues
    
    def generate_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìã –û–¢–ß–ï–¢ –ü–û –ê–†–•–ò–¢–ï–ö–¢–£–†–ï SAMe")
        print("="*60)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
        circular_imports = self.check_circular_imports()
        dependencies = self.analyze_import_dependencies()
        interface_compliance = self.check_interface_compliance()
        backward_compatibility = self.check_backward_compatibility()
        performance = self.measure_performance()
        code_quality = self.check_code_quality()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = []
        report.append("# –û—Ç—á–µ—Ç –ø–æ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–µ SAMe\n")
        
        # –¶–∏—Ä–∫—É–ª—è—Ä–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
        if circular_imports:
            report.append("## ‚ùå –¶–∏—Ä–∫—É–ª—è—Ä–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã:")
            for module, errors in circular_imports.items():
                report.append(f"- **{module}**: {', '.join(errors)}")
        else:
            report.append("## ‚úÖ –¶–∏—Ä–∫—É–ª—è—Ä–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        report.append("")
        
        # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        report.append("## üìä –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –º–µ–∂–¥—É –º–æ–¥—É–ª—è–º–∏:")
        for module, deps in dependencies.items():
            if deps['imports']:
                report.append(f"- **{module}** –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç: {', '.join(deps['imports'])}")
        
        report.append("")
        
        # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º
        if interface_compliance:
            report.append("## ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏:")
            for component, issues in interface_compliance.items():
                report.append(f"- **{component}**: {', '.join(issues)}")
        else:
            report.append("## ‚úÖ –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º: OK")
        
        report.append("")
        
        # –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
        if backward_compatibility:
            report.append("## ‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é:")
            for import_path, issues in backward_compatibility.items():
                report.append(f"- **{import_path}**: {', '.join(issues)}")
        else:
            report.append("## ‚úÖ –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: OK")
        
        report.append("")
        
        # –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        report.append("## ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–º–ø–æ—Ä—Ç–æ–≤:")
        for module, time_taken in performance.items():
            status = "üü¢" if time_taken < 1.0 else "üü°" if time_taken < 3.0 else "üî¥"
            report.append(f"- {status} **{module}**: {time_taken:.3f}s")
        
        report.append("")
        
        # –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞
        if code_quality:
            report.append("## üìù –ü—Ä–æ–±–ª–µ–º—ã –∫–∞—á–µ—Å—Ç–≤–∞ –∫–æ–¥–∞:")
            for module, issues in code_quality.items():
                report.append(f"- **{module}**:")
                for issue in issues:
                    report.append(f"  - {issue}")
        else:
            report.append("## ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞: OK")
        
        report.append("")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        report.append("## üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        
        if circular_imports:
            report.append("- –£—Å—Ç—Ä–∞–Ω–∏—Ç—å —Ü–∏—Ä–∫—É–ª—è—Ä–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
        
        if any(time_taken > 2.0 for time_taken in performance.values()):
            report.append("- –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–ª–µ–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã")
        
        if interface_compliance:
            report.append("- –ü—Ä–∏–≤–µ—Å—Ç–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞–º–∏")
        
        if backward_compatibility:
            report.append("- –ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å—é")
        
        if not any([circular_imports, interface_compliance, backward_compatibility]):
            report.append("- –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –≤ —Ö–æ—Ä–æ—à–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏! üéâ")
        
        return "\n".join(report)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    project_root = Path(__file__).parent.parent
    reviewer = ArchitectureReviewer(project_root)
    
    report = reviewer.generate_report()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = project_root / "docs" / "architecture_review.md"
    report_file.parent.mkdir(exist_ok=True)
    
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {report_file}")
    print("\n" + "="*60)


if __name__ == "__main__":
    main()
