#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∞–Ω–∞–ª–æ–≥–æ–≤
"""

import pandas as pd
import sys
from pathlib import Path
import argparse

def view_results(results_folder: str):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    folder_path = Path(results_folder)
    if not folder_path.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {results_folder} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    print(f"üìÅ –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑ –ø–∞–ø–∫–∏: {folder_path}")
    print("=" * 80)
    
    # 1. –û—Ç—á–µ—Ç –æ–± –æ–±—Ä–∞–±–æ—Ç–∫–µ
    report_file = folder_path / "processing_report.txt"
    if report_file.exists():
        print("\nüìä –û–¢–ß–ï–¢ –û–ë –û–ë–†–ê–ë–û–¢–ö–ï:")
        print("-" * 40)
        with open(report_file, 'r', encoding='utf-8') as f:
            print(f.read())
    
    # 2. –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    processed_file = folder_path / "processed_data_with_duplicates.csv"
    if processed_file.exists():
        print("\nüìã –û–ë–†–ê–ë–û–¢–ê–ù–ù–´–ï –î–ê–ù–ù–´–ï (–ø–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π):")
        print("-" * 40)
        df = pd.read_csv(processed_file)
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π (–±–µ–∑ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤): {len(df)}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º
        if 'duplicate_count' in df.columns:
            duplicates_count = len(df[df['duplicate_count'] > 0])
            print(f"–ó–∞–ø–∏—Å–µ–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {duplicates_count}")
        
        print("\n–ü–µ—Ä–≤—ã–µ 10 –∑–∞–ø–∏—Å–µ–π:")
        print(df.head(10).to_string(index=False))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥—É–±–ª–∏–∫–∞—Ç–∞–º
        if 'duplicate_count' in df.columns:
            duplicates = df[df['duplicate_count'] > 0]
            print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏: {len(duplicates)}")
            if len(duplicates) > 0:
                print("–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø–∏—Å–µ–π —Å –¥—É–±–ª–∏–∫–∞—Ç–∞–º–∏:")
                print(duplicates[['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'duplicate_count', 'duplicate_indices']].head().to_string(index=False))
    
    # 3. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤
    analogs_file = folder_path / "analogs_search_results.csv"
    if analogs_file.exists():
        print("\nüîó –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê –ê–ù–ê–õ–û–ì–û–í:")
        print("-" * 40)
        analogs_df = pd.read_csv(analogs_file)
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –∞–Ω–∞–ª–æ–≥–æ–≤: {len(analogs_df)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º
        if 'type' in analogs_df.columns:
            type_counts = analogs_df['type'].value_counts()
            print("\n–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∞–Ω–∞–ª–æ–≥–æ–≤:")
            for analog_type, count in type_counts.items():
                print(f"  {analog_type}: {count}")
        
        # –¢–æ–ø-10 –∞–Ω–∞–ª–æ–≥–æ–≤ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏
        print("\nüèÜ –¢–û–ü-10 –ê–ù–ê–õ–û–ì–û–í –ü–û –°–•–û–ñ–ï–°–¢–ò:")
        top_analogs = analogs_df.nlargest(10, 'similarity_coefficient')
        print(top_analogs[['original_name', 'similar_name', 'similarity_coefficient', 'type']].to_string(index=False))
        
    # 4. –î–µ—Ä–µ–≤—å—è —Ç–æ–≤–∞—Ä–æ–≤
    trees_file = folder_path / "product_trees.txt"
    if trees_file.exists():
        print("\nüå≥ –î–ï–†–ï–í–¨–Ø –¢–û–í–ê–†–û–í:")
        print("-" * 40)
        
        with open(trees_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        print(f"–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ –¥–µ—Ä–µ–≤—å–µ–≤: {len(lines)}")
        
        # –ü–æ–¥—Å—á–µ—Ç –∫–æ—Ä–Ω–µ–≤—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
        root_count = sum(1 for line in lines if line.startswith('- ') and '(None)' in line)
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–Ω–µ–≤—ã—Ö –¥–µ—Ä–µ–≤—å–µ–≤: {root_count}")
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ä–µ–≤—å–µ–≤
        print("\n–ü–µ—Ä–≤—ã–µ 3 –¥–µ—Ä–µ–≤–∞:")
        tree_count = 0
        for i, line in enumerate(lines):
            if line.startswith('- ') and '(None)' in line:
                tree_count += 1
                if tree_count > 3:
                    break
                print(f"\n–î–µ—Ä–µ–≤–æ {tree_count}:")
                print(line.strip())
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—á–µ—Ä–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã
                j = i + 1
                while j < len(lines) and lines[j].startswith('    - '):
                    print(lines[j].strip())
                    j += 1
                print()

def analyze_data_structure(input_file: str):
    """–ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    print(f"\nüîç –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –î–ê–ù–ù–´–•: {input_file}")
    print("-" * 50)
    
    try:
        if input_file.endswith('.csv'):
            df = pd.read_csv(input_file)
        elif input_file.endswith('.xlsx'):
            df = pd.read_excel(input_file)
        else:
            print("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞")
            return
        
        print(f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
        print(f"–ö–æ–ª–æ–Ω–∫–∏: {list(df.columns)}")
        print(f"–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
        for col in df.columns:
            print(f"  {col}: {df[col].dtype}")
        
        print("\n–ü–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π:")
        print(df.head().to_string(index=False))
        
        # –ü–æ–∏—Å–∫ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏
        name_columns = []
        for col in df.columns:
            if any(keyword in col.lower() for keyword in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'name', 'title']):
                name_columns.append(col)
        
        print(f"\nüéØ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏: {name_columns}")
        
        if name_columns:
            print(f"\n–ü—Ä–∏–º–µ—Ä—ã –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ '{name_columns[0]}':")
            print(df[name_columns[0]].head(10).tolist())
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {e}")

def main():
    parser = argparse.ArgumentParser(description='–ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –∞–Ω–∞–ª–æ–≥–æ–≤')
    parser.add_argument('results_folder', help='–ü–∞–ø–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, src/data/output/2025-08-27)')
    parser.add_argument('--analyze', help='–§–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö')
    
    args = parser.parse_args()
    
    if args.analyze:
        analyze_data_structure(args.analyze)
    
    view_results(args.results_folder)

if __name__ == "__main__":
    main()
