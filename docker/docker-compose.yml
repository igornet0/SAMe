networks:
  same-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  models_data:

services:
  # База данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: same-db
    environment:
      POSTGRES_USER: same_user
      POSTGRES_PASSWORD: same_password
      POSTGRES_DB: same_db
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - same-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U same_user -d same_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: same-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - same-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # RabbitMQ брокер для фоновых задач
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: same-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - same-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Основное приложение SAMe
  app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: same-app
    environment:
      - DATABASE_URL=postgresql+asyncpg://same_user:same_password@db:5432/same_db
      - REDIS_URL=redis://redis:6379/0
      - RUN__CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RUN__CELERY_RESULT_BACKEND=redis://redis:6379/0
      - ENVIRONMENT=production
      - DEBUG=false
    ports:
      - "8000:8000"
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - models_data:/app/models
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - same-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: same-celery-worker
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - RUN__CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672//
      - RUN__CELERY_RESULT_BACKEND=redis://redis:6379/0
    networks:
      - same-network
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - models_data:/app/models
    command: >
      sh -c "celery -A same_api.api.configuration.tasks.celery_app.celery_app worker -l info"

  # Frontend React приложение
  frontend:
    build:
      context: ../frontend/same-frontend
      dockerfile: Dockerfile
      target: production
    container_name: same-frontend
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:8000
      - REACT_APP_MAX_FILE_SIZE=52428800
      - REACT_APP_ENVIRONMENT=production
    ports:
      - "3000:3000"
    depends_on:
      app:
        condition: service_started
    networks:
      - same-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PgAdmin для управления БД
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: same-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@same.dev
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - ./pgadmin:/var/lib/pgadmin
    depends_on:
      - db
    networks:
      - same-network
