#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–º –Ω–∞–±–æ—Ä–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import pandas as pd
from pathlib import Path
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º
sys.path.append(str(Path(__file__).parent))

from data_processor import DataProcessor, ProcessingConfig

async def demo_fixed_processing():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    
    print("üéØ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥–∞—Ç–∞—Å–µ—Ç–∞
    input_file = "src/data/input/main_dataset.xlsx"
    
    if not Path(input_file).exists():
        print(f"‚ùå –§–∞–π–ª {input_file} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    try:
        df = pd.read_excel(input_file)
        sample_df = df.head(5).copy()
        
        print(f"üìä –í–∑—è–ª–∏ –æ–±—Ä–∞–∑–µ—Ü –∏–∑ {len(sample_df)} –∑–∞–ø–∏—Å–µ–π:")
        for i, row in sample_df.iterrows():
            print(f"  {i+1}. {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'][:80]}...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        config = ProcessingConfig(
            batch_size=10,
            save_format="csv",
            include_statistics=False,
            include_metadata=False
        )
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞
        processor = DataProcessor(config)
        processor.original_df = sample_df
        
        print("\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        processed_df = await processor.process_data()
        
        print("\nüìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã (–ø–æ–∫–∞–∑–∞–Ω—ã –∫–ª—é—á–µ–≤—ã–µ —Ä–∞–∑–ª–∏—á–∏—è):")
        print("=" * 80)
        
        for idx, row in processed_df.iterrows():
            print(f"\nüî∏ –ó–∞–ø–∏—Å—å {idx + 1}:")
            print(f"   üìù –ò—Å—Ö–æ–¥–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            print(f"      {row['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}")
            print(f"   ‚ú® Processed (–∏—Å—Ö–æ–¥–Ω—ã–π + trim):")
            print(f"      {row['processed_name']}")
            print(f"   üßπ Cleaned (–æ—á–∏—â–µ–Ω–Ω—ã–π):")
            print(f"      {row['cleaned_name']}")
            print(f"   üéØ Normalized (–Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π):")
            print(f"      {row['normalized_name']}")
            print(f"   üèÜ Final (—á–∏—Å—Ç–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ):")
            print(f"      {row['final_name']}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            if row['model_brand']:
                print(f"   üè∑Ô∏è  –ë—Ä–µ–Ω–¥: {row['model_brand']}")
            if row['extracted_parameters']:
                print(f"   ‚öôÔ∏è  –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {row['extracted_parameters']}")
            if row['category'] != '–æ–±—â–∏–µ_—Ç–æ–≤–∞—Ä—ã':
                print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {row['category']} (—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {row['category_confidence']:.3f})")
            
            # –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–∏–π
            all_fields = [row['processed_name'], row['cleaned_name'], row['normalized_name'], row['final_name']]
            stages_different = len(set(all_fields))
            some_different = stages_different > 1
            
            if some_different:
                print(f"   ‚úÖ –≠–¢–ê–ü–´ –û–ë–†–ê–ë–û–¢–ö–ò –†–ê–ó–õ–ò–ß–ê–Æ–¢–°–Ø")
            else:
                print(f"   ‚ö†Ô∏è  –í—Å–µ —ç—Ç–∞–ø—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã")
            
            print("-" * 80)
        
        print("\nüéâ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print("\nüí° –û—Å–Ω–æ–≤–Ω—ã–µ —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   ‚Ä¢ processed_name: —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏—Å—Ö–æ–¥–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        print("   ‚Ä¢ cleaned_name: –±–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞")  
        print("   ‚Ä¢ normalized_name: –ø–æ–ª–Ω–∞—è –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π")
        print("   ‚Ä¢ üÜï final_name: —á–∏—Å—Ç–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω—ã –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")
        print("   ‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    asyncio.run(demo_fixed_processing())
