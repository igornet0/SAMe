import asyncio
from pathlib import Path
import argparse
import warnings
import logging
warnings.filterwarnings('ignore')

import sys
current_dir = Path(__file__).parent if '__file__' in globals() else Path.cwd()
sys.path.insert(0, str(current_dir / "src"))

# NLP –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
try:
    import spacy
    nlp = spacy.load('ru_core_news_lg')
    SPACY_AVAILABLE = True
except:
    SPACY_AVAILABLE = False
    print("‚ö†Ô∏è –†—É—Å—Å–∫–∞—è –º–æ–¥–µ–ª—å SpaCy –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ù–µ–∫–æ—Ç–æ—Ä—ã–µ NLP —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.")

from src import data_helper, AnalogSearchProcessor

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(name)-45s:%(lineno)-3d - %(levelname)-7s - %(message)s',
    handlers=[
        logging.FileHandler(data_helper["log"] / 'analog_search_processor.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

async def main():
    parser = argparse.ArgumentParser(
        description="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏ –ø–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SAMe –ø—Ä–æ–µ–∫—Ç–∞"
    )

    parser.add_argument(
        "input_csv",
        help="–ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV —Ñ–∞–π–ª—É —Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –∫–∞—Ç–∞–ª–æ–≥–æ–º"
    )

    parser.add_argument(
        "-o", "--output",
        help="–ü—É—Ç—å –∫ –≤—ã—Ö–æ–¥–Ω–æ–º—É Excel —Ñ–∞–π–ª—É (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
        default=None
    )

    parser.add_argument(
        "-m", "--method",
        choices=[
            "fuzzy", "semantic", "hybrid", "extended_hybrid",
            "token_id", "prefix", "inverted_index", "tfidf",
            "lsh", "spatial", "advanced_hybrid", "hybrid_dbscan", "optimized_dbscan"
        ],
        default="extended_hybrid",
        help="–ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã:\n"
             "  fuzzy, semantic, hybrid, extended_hybrid - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ –º–µ—Ç–æ–¥—ã\n"
             "  token_id - –ø–æ–∏—Å–∫ –ø–æ ID —Ç–æ–∫–µ–Ω–æ–≤\n"
             "  prefix - –ø—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫\n"
             "  inverted_index - –ø–æ–∏—Å–∫ –ø–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É\n"
             "  tfidf - TF-IDF –ø–æ–∏—Å–∫\n"
             "  lsh - LSH –ø–æ–∏—Å–∫\n"
             "  spatial - –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫\n"
             "  advanced_hybrid - –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫\n"
             "  hybrid_dbscan - –≥–∏–±—Ä–∏–¥–Ω—ã–π DBSCAN –ø–æ–∏—Å–∫ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π\n"
             "  optimized_dbscan - –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DBSCAN –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö\n"
             "(–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: extended_hybrid)"
    )

    parser.add_argument(
        "--disable-extended-search",
        action="store_true",
        help="–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ legacy)"
    )

    parser.add_argument(
        "-t", "--threshold",
        type=float,
        default=0.6,
        help="–ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 0.6)"
    )

    parser.add_argument(
        "-v", "--verbose",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥ –ª–æ–≥–æ–≤"
    )

    parser.add_argument(
        "-l", "--limit",
        type=int,
        default=None,
        help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö –∑–∞–ø–∏—Å–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"
    )

    parser.add_argument(
        "--max-excel-results",
        type=int,
        default=1000000,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ Excel (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1,000,000)"
    )

    args = parser.parse_args()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –≤—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if not Path(args.input_csv).exists():
            print(f"‚ùå –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {args.input_csv}")
            return 1

        print(f"üöÄ –ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {args.input_csv}")
        print(f"üìä –ú–µ—Ç–æ–¥ –ø–æ–∏—Å–∫–∞: {args.method}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–ø–µ –ø–æ–∏—Å–∫–∞
        token_search_methods = {'token_id', 'prefix', 'inverted_index',
                                'tfidf', 'lsh', 'spatial',
                                'advanced_hybrid', 'hybrid'}

        if args.method == 'hybrid_dbscan':
            print(f"üîç –¢–∏–ø –ø–æ–∏—Å–∫–∞: –ì–∏–±—Ä–∏–¥–Ω—ã–π DBSCAN –ø–æ–∏—Å–∫ —Å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–µ–π")
            print(f"üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {args.threshold}")
            print(f"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: CSV —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–ª–∞—Å—Ç–µ—Ä–∞—Ö")
        elif args.method == 'optimized_dbscan':
            print(f"üîç –¢–∏–ø –ø–æ–∏—Å–∫–∞: –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π DBSCAN –¥–ª—è –±–æ–ª—å—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö")
            print(f"üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {args.threshold}")
            print(f"üìä –í—ã—Ö–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–∞—Ç: CSV —Å –±—ã—Å—Ç—Ä—ã–º –ø–æ–∏—Å–∫–æ–º")
            print(f"‚ö° –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è: –°—ç–º–ø–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã")
        elif args.method in token_search_methods:
            method_descriptions = {
                'token_id': '–ü–æ–∏—Å–∫ –ø–æ ID —Ç–æ–∫–µ–Ω–æ–≤',
                'prefix': '–ü—Ä–µ—Ñ–∏–∫—Å–Ω—ã–π –ø–æ–∏—Å–∫ (Trie)',
                'inverted_index': '–ü–æ–∏—Å–∫ –ø–æ –∏–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É',
                'tfidf': 'TF-IDF –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫',
                'lsh': 'LSH –ø—Ä–∏–±–ª–∏–∂–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫',
                'spatial': '–ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫ (FAISS)',
                'advanced_hybrid': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫',
                'hybrid': '–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø–æ–∏—Å–∫ (—Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–π)'
            }
            print(f"üîç –¢–∏–ø –ø–æ–∏—Å–∫–∞: {method_descriptions.get(args.method, '–ü–æ–∏—Å–∫ –ø–æ —Ç–æ–∫–µ–Ω–∞–º')}")
            if args.method == "token_id":
                print(f"üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏ (–∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π): {args.threshold * 0.5}")
            else:
                print(f"üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {args.threshold}")
        else:
            print(f"üéØ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {args.threshold}")

        print(f"üîç –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫: {'–û—Ç–∫–ª—é—á–µ–Ω' if args.disable_extended_search else '–í–∫–ª—é—á–µ–Ω'}")
        if args.limit:
            print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã—Ö {args.limit} –∑–∞–ø–∏—Å–µ–π")
        if args.max_excel_results < 1048575:
            print(f"üìä –õ–∏–º–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ Excel: {args.max_excel_results:,}")

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        processor = AnalogSearchProcessor(
            search_method=args.method,
            similarity_threshold=args.threshold,
            use_extended_search=not args.disable_extended_search,
            max_excel_results=args.max_excel_results
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞
        output_path = await processor.process_catalog(
            input_csv_path=args.input_csv,
            output_excel_path=args.output,
            limit_records=args.limit
        )

        print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")

        return 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1


if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) == 1:
        print(f"\nüîß –î–ª—è –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:")
        print(f"python {sys.argv[0]} input.csv")
        print(f"\nüìñ –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏:")
        print(f"python {sys.argv[0]} --help")
    else:
        # –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
        exit_code = asyncio.run(main())
        sys.exit(exit_code)