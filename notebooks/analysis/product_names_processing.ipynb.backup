{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# üìä –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π SAMe\n",
    "\n",
    "–≠—Ç–æ—Ç notebook –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π SAMe.\n",
    "\n",
    "## –≠—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏:\n",
    "1. **Raw_Name** - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∏–∑ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–∞\n",
    "2. **Cleaned_Name** - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏ (—É–¥–∞–ª–µ–Ω–∏–µ –º—É—Å–æ—Ä–∞, –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Ç.–¥.)\n",
    "3. **Lemmatized_Name** - –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å–ª–µ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n",
    "4. **Normalized_Name** - –§–∏–Ω–∞–ª—å–Ω–æ–µ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è\n",
    "\n",
    "## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è:\n",
    "- **Extracted_Parameters** - –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n",
    "- **Extracted_Codes** - –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (–ì–û–°–¢, –¢–£, –∞—Ä—Ç–∏–∫—É–ª—ã)\n",
    "- **Synonym_Replacements** - –ó–∞–º–µ–Ω–µ–Ω–Ω—ã–µ —Å–∏–Ω–æ–Ω–∏–º—ã"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∏–º–ø–æ—Ä—Ç—ã"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: /Users/igor/Desktop/PythonProjects/SAMe\n",
      "üì¶ –ü—É—Ç—å –∫ –º–æ–¥—É–ª—è–º: /Users/igor/Desktop/PythonProjects/SAMe/src\n"
     ]
    }
   ],
   "source": [
    "import sys\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "from pathlib import Path\n",
    "import json\n",
    "from typing import List, Dict, Any\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')\n",
    "\n",
    "# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º SAMe\n",
    "project_root = Path.cwd()\n",
    "src_path = project_root / \"src\"\n",
    "if str(src_path) not in sys.path:\n",
    "    sys.path.insert(0, str(src_path))\n",
    "\n",
    "print(f\"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {project_root}\")\n",
    "print(f\"üì¶ –ü—É—Ç—å –∫ –º–æ–¥—É–ª—è–º: {src_path}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ –ú–æ–¥—É–ª–∏ SAMe —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã\n"
     ]
    }
   ],
   "source": [
    "# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π SAMe\n",
    "try:\n",
    "    from same.text_processing import (\n",
    "        EnhancedPreprocessor, EnhancedPreprocessorConfig,\n",
    "        UnitsConfig, SynonymsConfig, TechCodesConfig,\n",
    "        TextPreprocessor, PreprocessorConfig\n",
    "    )\n",
    "    print(\"‚úÖ –ú–æ–¥—É–ª–∏ SAMe —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã\")\n",
    "except ImportError as e:\n",
    "    print(f\"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π SAMe: {e}\")\n",
    "    print(\"üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ SAMe\")\n",
    "    raise"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ 15 —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\n",
      "\n",
      "üîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π:\n",
      "  1. –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è\n",
      "  2. –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π\n",
      "  3. –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022\n",
      "  ...\n"
     ]
    }
   ],
   "source": [
    "# –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ - —Ä–µ–∞–ª—å–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\n",
    "test_data = [\n",
    "    \"–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è\",\n",
    "    \"–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π\",\n",
    "    \"–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022\",\n",
    "    \"–ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π 6205 ZZ –¥–∏–∞–º–µ—Ç—Ä 25–º–º –ì–û–°–¢ 8338-75\",\n",
    "    \"–ö–ª–∞–ø–∞–Ω –∑–∞–ø–æ—Ä–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π DN50 PN16 —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π\",\n",
    "    \"–†–µ–¥—É–∫—Ç–æ—Ä —á–µ—Ä–≤—è—á–Ω—ã–π –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ 40:1 –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π\",\n",
    "    \"–ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ—Ä—à–Ω–µ–≤–æ–π 10–∞—Ç–º –æ–±—ä–µ–º —Ä–µ—Å–∏–≤–µ—Ä–∞ 100–ª –∞—Ä—Ç–∏–∫—É–ª SCM-6066-71\",\n",
    "    \"–í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Å–µ–≤–æ–π –¥–∏–∞–º–µ—Ç—Ä 300–º–º —Ä–∞—Å—Ö–æ–¥ 1000–º3/—á –∫—Ä—É–≥–ª—ã–π\",\n",
    "    \"–ú—É—Ñ—Ç–∞ —É–ø—Ä—É–≥–∞—è –ú–£–í–ü –¥–∏–∞–º–µ—Ç—Ä 125–º–º —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è\",\n",
    "    \"–î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ—Ä–º–æ–ø–∞—Ä–Ω—ã–π 0-1000¬∞C –ø–æ –ì–û–°–¢ –† 52857-2007\",\n",
    "    \"–ü—Ä–æ–∫–ª–∞–¥–∫–∞ —É–ø–ª–æ—Ç–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–µ–∑–∏–Ω–æ–≤–∞—è 3/4 –∏–∑ –∫–∞—É—á—É–∫–∞\",\n",
    "    \"–ë–æ–ª—Ç –ú10—Ö50 DIN 912 —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–º —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –ø–æ–¥ –∫–ª—é—á\",\n",
    "    \"–≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π 7,5–∫–í—Ç 3000–æ–±/–º–∏–Ω\",\n",
    "    \"–¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –±–µ—Å—à–æ–≤–Ω–∞—è 89—Ö8–º–º –¥–ª–∏–Ω–∞ 6–º –ì–û–°–¢ 8732-78\",\n",
    "    \"–§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π DN100 PN10 –ø–æ –¢–£ 2296-001-12345678\"\n",
    "]\n",
    "\n",
    "print(f\"üìä –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(test_data)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\")\n",
    "print(\"\\nüîç –ü—Ä–∏–º–µ—Ä—ã –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π:\")\n",
    "for i, name in enumerate(test_data[:3], 1):\n",
    "    print(f\"  {i}. {name}\")\n",
    "print(\"  ...\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ –°—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n"
     ]
    }
   ],
   "source": [
    "# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ (–±–∞–∑–æ–≤–æ–≥–æ) –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞\n",
    "old_config = PreprocessorConfig(\n",
    "    save_intermediate_steps=True\n",
    ")\n",
    "old_preprocessor = TextPreprocessor(old_config)\n",
    "\n",
    "print(\"‚úÖ –°—Ç–∞—Ä—ã–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\n",
      "üîß –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\n",
      "   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\n",
      "   ‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n",
      "   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤\n"
     ]
    }
   ],
   "source": [
    "# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–æ–≤–æ–≥–æ (—É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ) –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞\n",
    "enhanced_config = EnhancedPreprocessorConfig(\n",
    "    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\n",
    "    units_config=UnitsConfig(\n",
    "        normalize_fractions=True,\n",
    "        convert_to_metric=False,  # –û—Å—Ç–∞–≤–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –µ–¥–∏–Ω–∏—Ü—ã\n",
    "        extract_parameters=True,\n",
    "        standardize_units=True\n",
    "    ),\n",
    "    \n",
    "    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n",
    "    synonyms_config=SynonymsConfig(\n",
    "        normalize_materials=True,\n",
    "        normalize_shapes=True,\n",
    "        normalize_functions=True,\n",
    "        case_sensitive=False\n",
    "    ),\n",
    "    \n",
    "    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤\n",
    "    tech_codes_config=TechCodesConfig(\n",
    "        parse_gost=True,\n",
    "        parse_tu=True,\n",
    "        parse_articles=True,\n",
    "        normalize_separators=True\n",
    "    ),\n",
    "    \n",
    "    # –í–∫–ª—é—á–µ–Ω–∏–µ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π\n",
    "    enable_units_processing=True,\n",
    "    enable_synonyms_processing=True,\n",
    "    enable_tech_codes_processing=True,\n",
    "    \n",
    "    # –ü–æ—Ä—è–¥–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n",
    "    processing_order=[\n",
    "        'base_preprocessing',\n",
    "        'units_processing',\n",
    "        'tech_codes_processing',\n",
    "        'synonyms_processing'\n",
    "    ]\n",
    ")\n",
    "\n",
    "enhanced_preprocessor = EnhancedPreprocessor(enhanced_config)\n",
    "\n",
    "print(\"‚úÖ –£–ª—É—á—à–µ–Ω–Ω—ã–π –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω\")\n",
    "print(\"üîß –í–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏:\")\n",
    "print(\"   ‚Ä¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è\")\n",
    "print(\"   ‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤\")\n",
    "print(\"   ‚Ä¢ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "‚úÖ –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –≥–æ—Ç–æ–≤–∞\n"
     ]
    }
   ],
   "source": [
    "# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —ç—Ç–∞–ø–æ–≤ –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞\n",
    "def extract_processing_stages(old_result: Dict[str, Any]) -> Dict[str, str]:\n",
    "    \"\"\"–ò–∑–≤–ª–µ–∫–∞–µ—Ç —ç—Ç–∞–ø—ã –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å—Ç–∞—Ä–æ–≥–æ –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞\"\"\"\n",
    "    stages = {\n",
    "        'raw_name': old_result.get('original', ''),\n",
    "        'cleaned_name': '',\n",
    "        'lemmatized_name': '',\n",
    "        'normalized_name': old_result.get('final_text', '')\n",
    "    }\n",
    "    \n",
    "    # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —ç—Ç–∞–ø—ã\n",
    "    if 'processing_stages' in old_result:\n",
    "        processing_stages = old_result['processing_stages']\n",
    "        \n",
    "        # –≠—Ç–∞–ø –æ—á–∏—Å—Ç–∫–∏\n",
    "        if 'cleaning' in processing_stages:\n",
    "            stages['cleaned_name'] = processing_stages['cleaning'].get('cleaned_text', '')\n",
    "        elif 'html_cleaned' in old_result:\n",
    "            stages['cleaned_name'] = old_result['html_cleaned']\n",
    "        \n",
    "        # –≠—Ç–∞–ø –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n",
    "        if 'lemmatization' in processing_stages:\n",
    "            lemma_result = processing_stages['lemmatization']\n",
    "            if 'lemmatized' in lemma_result:\n",
    "                stages['lemmatized_name'] = lemma_result['lemmatized']\n",
    "            elif 'filtered_lemmas' in lemma_result:\n",
    "                stages['lemmatized_name'] = ' '.join(lemma_result['filtered_lemmas'])\n",
    "    \n",
    "    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è\n",
    "    if not stages['cleaned_name']:\n",
    "        stages['cleaned_name'] = stages['raw_name']\n",
    "    if not stages['lemmatized_name']:\n",
    "        stages['lemmatized_name'] = stages['cleaned_name']\n",
    "    \n",
    "    return stages\n",
    "\n",
    "print(\"‚úÖ –§—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç—Ç–∞–ø–æ–≤ –≥–æ—Ç–æ–≤–∞\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π...\n",
      "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 15/15: –§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π DN100 PN10 –ø–æ –¢–£ 2296-001-...\n",
      "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ 15 –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\n"
     ]
    }
   ],
   "source": [
    "# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\n",
    "print(\"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π...\")\n",
    "\n",
    "results = []\n",
    "\n",
    "for i, raw_name in enumerate(test_data, 1):\n",
    "    print(f\"\\r‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {i}/{len(test_data)}: {raw_name[:50]}...\", end=\"\")\n",
    "    \n",
    "    try:\n",
    "        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ä—ã–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–∑–æ–≤—ã—Ö —ç—Ç–∞–ø–æ–≤\n",
    "        old_result = old_preprocessor.preprocess_text(raw_name)\n",
    "        stages = extract_processing_stages(old_result)\n",
    "        \n",
    "        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤—ã–º –ø—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö\n",
    "        enhanced_result = enhanced_preprocessor.preprocess_text(raw_name)\n",
    "        \n",
    "        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∑–∞–ø–∏—Å—å\n",
    "        record = {\n",
    "            'Raw_Name': raw_name,\n",
    "            'Cleaned_Name': stages['cleaned_name'],\n",
    "            'Lemmatized_Name': stages['lemmatized_name'],\n",
    "            'Normalized_Name': enhanced_result['final_text'],\n",
    "            \n",
    "            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è\n",
    "            'Processing_Success': enhanced_result.get('processing_successful', True),\n",
    "            'Parameters_Count': len(enhanced_result.get('extracted_parameters', [])),\n",
    "            'Codes_Count': len(enhanced_result.get('extracted_codes', [])),\n",
    "            'Synonyms_Count': len(enhanced_result.get('synonym_replacements', [])),\n",
    "            \n",
    "            # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–¥–ª—è –∞–Ω–∞–ª–∏–∑–∞)\n",
    "            'Extracted_Parameters': enhanced_result.get('extracted_parameters', []),\n",
    "            'Extracted_Codes': enhanced_result.get('extracted_codes', []),\n",
    "            'Synonym_Replacements': enhanced_result.get('synonym_replacements', [])\n",
    "        }\n",
    "        \n",
    "        results.append(record)\n",
    "        \n",
    "    except Exception as e:\n",
    "        print(f\"\\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ '{raw_name}': {e}\")\n",
    "        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å —Å –æ—à–∏–±–∫–æ–π\n",
    "        results.append({\n",
    "            'Raw_Name': raw_name,\n",
    "            'Cleaned_Name': raw_name,\n",
    "            'Lemmatized_Name': raw_name,\n",
    "            'Normalized_Name': raw_name,\n",
    "            'Processing_Success': False,\n",
    "            'Parameters_Count': 0,\n",
    "            'Codes_Count': 0,\n",
    "            'Synonyms_Count': 0,\n",
    "            'Extracted_Parameters': [],\n",
    "            'Extracted_Codes': [],\n",
    "            'Synonym_Replacements': []\n",
    "        })\n",
    "\n",
    "print(f\"\\n‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìã –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: 15 —Å—Ç—Ä–æ–∫ √ó 4 —Å—Ç–æ–ª–±—Ü–æ–≤\n",
      "\n",
      "üîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Raw_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Cleaned_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Lemmatized_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Normalized_Name",
         "rawType": "object",
         "type": "string"
        }
       ],
       "ref": "7587931f-c003-43b8-8060-2989345f8ad4",
       "rows": [
        [
         "0",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π"
        ],
        [
         "1",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å"
        ],
        [
         "2",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num>-<num —Ä-<num>-<num"
        ]
       ],
       "shape": {
        "columns": 4,
        "rows": 3
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Raw_Name</th>\n",
       "      <th>Cleaned_Name</th>\n",
       "      <th>Lemmatized_Name</th>\n",
       "      <th>Normalized_Name</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num&gt;-&lt;nu...</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Raw_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                        Cleaned_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                     Lemmatized_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                     Normalized_Name  \n",
       "0           –≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π  \n",
       "1     –Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å  \n",
       "2  —Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num>-<nu...  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# –°–æ–∑–¥–∞–µ–º DataFrame —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–æ–ª—è–º–∏\n",
    "df_main = pd.DataFrame([\n",
    "    {\n",
    "        'Raw_Name': r['Raw_Name'],\n",
    "        'Cleaned_Name': r['Cleaned_Name'],\n",
    "        'Lemmatized_Name': r['Lemmatized_Name'],\n",
    "        'Normalized_Name': r['Normalized_Name']\n",
    "    }\n",
    "    for r in results\n",
    "])\n",
    "\n",
    "print(f\"üìã –°–æ–∑–¥–∞–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {df_main.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df_main.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤\")\n",
    "print(\"\\nüîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:\")\n",
    "display(df_main.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìä –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: 15 —Å—Ç—Ä–æ–∫ √ó 8 —Å—Ç–æ–ª–±—Ü–æ–≤\n",
      "\n",
      "üîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Raw_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Cleaned_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Lemmatized_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Normalized_Name",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "Processing_Success",
         "rawType": "bool",
         "type": "boolean"
        },
        {
         "name": "Parameters_Count",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Codes_Count",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "Synonyms_Count",
         "rawType": "int64",
         "type": "integer"
        }
       ],
       "ref": "15d53b4f-f5be-432c-9f53-6363848a2d0a",
       "rows": [
        [
         "0",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è",
         "–≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π",
         "True",
         "0",
         "0",
         "1"
        ],
        [
         "1",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π",
         "–Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å",
         "True",
         "1",
         "1",
         "0"
        ],
        [
         "2",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022",
         "—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num>-<num —Ä-<num>-<num",
         "True",
         "1",
         "1",
         "0"
        ]
       ],
       "shape": {
        "columns": 8,
        "rows": 3
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Raw_Name</th>\n",
       "      <th>Cleaned_Name</th>\n",
       "      <th>Lemmatized_Name</th>\n",
       "      <th>Normalized_Name</th>\n",
       "      <th>Processing_Success</th>\n",
       "      <th>Parameters_Count</th>\n",
       "      <th>Codes_Count</th>\n",
       "      <th>Synonyms_Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è</td>\n",
       "      <td>–≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π</td>\n",
       "      <td>True</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...</td>\n",
       "      <td>–Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>–§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...</td>\n",
       "      <td>—Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num&gt;-&lt;nu...</td>\n",
       "      <td>True</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                            Raw_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                        Cleaned_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                     Lemmatized_Name  \\\n",
       "0               –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è   \n",
       "1  –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞...   \n",
       "2  –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14...   \n",
       "\n",
       "                                     Normalized_Name  Processing_Success  \\\n",
       "0           –≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π                True   \n",
       "1     –Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å                True   \n",
       "2  —Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num>-<nu...                True   \n",
       "\n",
       "   Parameters_Count  Codes_Count  Synonyms_Count  \n",
       "0                 0            0               1  \n",
       "1                 1            1               0  \n",
       "2                 1            1               0  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é —Ç–∞–±–ª–∏—Ü—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π\n",
    "df_extended = pd.DataFrame(results)\n",
    "\n",
    "# –£–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—è –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è\n",
    "df_display = df_extended.drop(columns=['Extracted_Parameters', 'Extracted_Codes', 'Synonym_Replacements'])\n",
    "\n",
    "print(f\"üìä –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞: {df_display.shape[0]} —Å—Ç—Ä–æ–∫ √ó {df_display.shape[1]} —Å—Ç–æ–ª–±—Ü–æ–≤\")\n",
    "print(\"\\nüîç –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π:\")\n",
    "display(df_display.head(3))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìà –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò\n",
      "==================================================\n",
      "üìù –í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π: 15\n",
      "‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: 15 (100.0%)\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 11 (–≤ —Å—Ä–µ–¥–Ω–µ–º 0.7 –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\n",
      "üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤: 20 (–≤ —Å—Ä–µ–¥–Ω–µ–º 1.3 –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\n",
      "üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: 6 (–≤ —Å—Ä–µ–¥–Ω–µ–º 0.4 –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\n",
      "\n",
      "üìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n"
     ]
    },
    {
     "data": {
      "application/vnd.microsoft.datawrangler.viewer.v0+json": {
       "columns": [
        {
         "name": "index",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "–ú–µ—Ç—Ä–∏–∫–∞",
         "rawType": "object",
         "type": "string"
        },
        {
         "name": "–ó–Ω–∞—á–µ–Ω–∏–µ",
         "rawType": "int64",
         "type": "integer"
        },
        {
         "name": "–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ",
         "rawType": "object",
         "type": "string"
        }
       ],
       "ref": "ace3b080-244a-452e-9a9b-573f4c5dbb40",
       "rows": [
        [
         "0",
         "–í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π",
         "15",
         "-"
        ],
        [
         "1",
         "–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ",
         "15",
         "100.0%"
        ],
        [
         "2",
         "–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤",
         "11",
         "0.7"
        ],
        [
         "3",
         "–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤",
         "20",
         "1.3"
        ],
        [
         "4",
         "–ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤",
         "6",
         "0.4"
        ]
       ],
       "shape": {
        "columns": 3,
        "rows": 5
       }
      },
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>–ú–µ—Ç—Ä–∏–∫–∞</th>\n",
       "      <th>–ó–Ω–∞—á–µ–Ω–∏–µ</th>\n",
       "      <th>–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>–í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π</td>\n",
       "      <td>15</td>\n",
       "      <td>-</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</td>\n",
       "      <td>15</td>\n",
       "      <td>100.0%</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤</td>\n",
       "      <td>11</td>\n",
       "      <td>0.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤</td>\n",
       "      <td>20</td>\n",
       "      <td>1.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>–ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤</td>\n",
       "      <td>6</td>\n",
       "      <td>0.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                –ú–µ—Ç—Ä–∏–∫–∞  –ó–Ω–∞—á–µ–Ω–∏–µ –°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ\n",
       "0    –í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π        15                       -\n",
       "1    –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ        15                  100.0%\n",
       "2  –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤        11                     0.7\n",
       "3       –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤        20                     1.3\n",
       "4    –ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤         6                     0.4"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n",
    "total_records = len(results)\n",
    "successful_processing = sum(1 for r in results if r['Processing_Success'])\n",
    "total_parameters = sum(r['Parameters_Count'] for r in results)\n",
    "total_codes = sum(r['Codes_Count'] for r in results)\n",
    "total_synonyms = sum(r['Synonyms_Count'] for r in results)\n",
    "\n",
    "print(\"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò\")\n",
    "print(\"=\" * 50)\n",
    "print(f\"üìù –í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π: {total_records}\")\n",
    "print(f\"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {successful_processing} ({successful_processing/total_records*100:.1f}%)\")\n",
    "print(f\"üîß –ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_parameters} (–≤ —Å—Ä–µ–¥–Ω–µ–º {total_parameters/total_records:.1f} –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\")\n",
    "print(f\"üìã –ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤: {total_codes} (–≤ —Å—Ä–µ–¥–Ω–µ–º {total_codes/total_records:.1f} –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\")\n",
    "print(f\"üîÑ –ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {total_synonyms} (–≤ —Å—Ä–µ–¥–Ω–µ–º {total_synonyms/total_records:.1f} –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ)\")\n",
    "\n",
    "# –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–Ω—É—é —Ç–∞–±–ª–∏—Ü—É\n",
    "summary_stats = pd.DataFrame({\n",
    "    '–ú–µ—Ç—Ä–∏–∫–∞': ['–í—Å–µ–≥–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π', '–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ', '–ò–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤', '–ò–∑–≤–ª–µ—á–µ–Ω–æ –∫–æ–¥–æ–≤', '–ó–∞–º–µ–Ω–µ–Ω–æ —Å–∏–Ω–æ–Ω–∏–º–æ–≤'],\n",
    "    '–ó–Ω–∞—á–µ–Ω–∏–µ': [total_records, successful_processing, total_parameters, total_codes, total_synonyms],\n",
    "    '–°—Ä–µ–¥–Ω–µ–µ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': ['-', f'{successful_processing/total_records:.1%}', f'{total_parameters/total_records:.1f}', f'{total_codes/total_records:.1f}', f'{total_synonyms/total_records:.1f}']\n",
    "})\n",
    "\n",
    "print(\"\\nüìã –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\")\n",
    "display(summary_stats)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–∏–º–µ—Ä–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 1: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è\n",
      "üßπ Cleaned_Name:    –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è\n",
      "üìö Lemmatized_Name: –í—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ 1/2 –∫–æ–Ω—É—Å 10 –∫–∞—É—á—É–∫–æ–≤–∞—è\n",
      "‚ú® Normalized_Name: –≤—Ç—É–ª–∫–∞ —Å–æ–ø–ª–∞ num num –∫–æ–Ω—É—Å num —Ä–µ–∑–∏–Ω–æ–≤—ã–π\n",
      "\n",
      "üîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (1):\n",
      "   1. '–∫–∞—É—á—É–∫–æ–≤—ã–π' ‚Üí '—Ä–µ–∑–∏–Ω–æ–≤—ã–π'\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 2: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π\n",
      "üßπ Cleaned_Name:    –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π\n",
      "üìö Lemmatized_Name: –ù–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5,5–∫–í—Ç 1500–æ–±/–º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—é—â–∏–π\n",
      "‚ú® Normalized_Name: –Ω–∞—Å–æ—Å —Ü–µ–Ω—Ç—Ä–æ–±–µ–∂–Ω—ã–π 5-5-–∫–≤—Ç num –º–∏–Ω –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 5.5 –∫–≤—Ç\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (1):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: 5-5-–∫–≤—Ç\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 3: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022\n",
      "üßπ Cleaned_Name:    –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022\n",
      "üìö Lemmatized_Name: –§–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—é—â–∏–π 245—Ö10,03–º–º –ø–æ –¢–£ 14-3–†-82-2022\n",
      "‚ú® Normalized_Name: —Ñ–∏–ª—å—Ç—Ä –º–∞—Å–ª—è–Ω—ã–π –æ—á–∏—â–∞—Ç—å num —Ö10-03-–º–º num>-<num —Ä-<num>-<num\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 10.03 –º–º\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (1):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: —Ö10-03-–º–º\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 4: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π 6205 ZZ –¥–∏–∞–º–µ—Ç—Ä 25–º–º –ì–û–°–¢ 8338-75\n",
      "üßπ Cleaned_Name:    –ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π 6205 ZZ –¥–∏–∞–º–µ—Ç—Ä 25–º–º –ì–û–°–¢ 8338-75\n",
      "üìö Lemmatized_Name: –ü–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π 6205 ZZ –¥–∏–∞–º–µ—Ç—Ä 25–º–º –ì–û–°–¢ 8338-75\n",
      "‚ú® Normalized_Name: –ø–æ–¥—à–∏–ø–Ω–∏–∫ —à–∞—Ä–∏–∫–æ–≤—ã–π num zz –¥–∏–∞–º–µ—Ç—Ä 25-0-–º–º –≥–û–°–¢ num>-<num\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 25.0 –º–º\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –û–°–¢: –û–°–¢ num\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: 25-0-–º–º\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 5: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ö–ª–∞–ø–∞–Ω –∑–∞–ø–æ—Ä–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π DN50 PN16 —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π\n",
      "üßπ Cleaned_Name:    –ö–ª–∞–ø–∞–Ω –∑–∞–ø–æ—Ä–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π DN50 PN16 —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π\n",
      "üìö Lemmatized_Name: –ö–ª–∞–ø–∞–Ω –∑–∞–ø–æ—Ä–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π DN50 PN16 —ç–ª–∞—Å—Ç–∏—á–Ω—ã–π\n",
      "‚ú® Normalized_Name: –∫–ª–∞–ø–∞–Ω –∑–∞–ø–æ—Ä–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π dn50-pn16-—Ä–µ–∑–∏–Ω–æ–≤—ã–π\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: dn50-\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: pn16-—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π\n",
      "\n",
      "üîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (1):\n",
      "   1. '—ç–ª–∞—Å—Ç–∏—á–Ω—ã–π' ‚Üí '—Ä–µ–∑–∏–Ω–æ–≤—ã–π'\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 6: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –†–µ–¥—É–∫—Ç–æ—Ä —á–µ—Ä–≤—è—á–Ω—ã–π –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ 40:1 –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π\n",
      "üßπ Cleaned_Name:    –†–µ–¥—É–∫—Ç–æ—Ä —á–µ—Ä–≤—è—á–Ω—ã–π –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ 40:1 –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π\n",
      "üìö Lemmatized_Name: –†–µ–¥—É–∫—Ç–æ—Ä —á–µ—Ä–≤—è—á–Ω—ã–π –ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ 40:1 –º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π\n",
      "‚ú® Normalized_Name: —Ä–µ–¥—É–∫—Ç–æ—Ä —á–µ—Ä–≤—è—á–Ω—ã–π –ø—Ä–∏–≤–æ–¥–Ω–æ–π —á–∏—Å–ª–æ num num —Å—Ç–∞–ª—å–Ω–æ–π\n",
      "\n",
      "üîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (2):\n",
      "   1. '–ø–µ—Ä–µ–¥–∞—Ç–æ—á–Ω—ã–π' ‚Üí '–ø—Ä–∏–≤–æ–¥–Ω–æ–π'\n",
      "   2. '–º–µ—Ç–∞–ª–ª–∏—á–µ—Å–∫–∏–π' ‚Üí '—Å—Ç–∞–ª—å–Ω–æ–π'\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 7: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ—Ä—à–Ω–µ–≤–æ–π 10–∞—Ç–º –æ–±—ä–µ–º —Ä–µ—Å–∏–≤–µ—Ä–∞ 100–ª –∞—Ä—Ç–∏–∫—É–ª SCM-6066-71\n",
      "üßπ Cleaned_Name:    –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ—Ä—à–Ω–µ–≤–æ–π 10–∞—Ç–º –æ–±—ä–µ–º —Ä–µ—Å–∏–≤–µ—Ä–∞ 100–ª –∞—Ä—Ç–∏–∫—É–ª SCM-6066-71\n",
      "üìö Lemmatized_Name: –ö–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ—Ä—à–Ω–µ–≤–æ–π 10–∞—Ç–º –æ–±—ä–µ–º —Ä–µ—Å–∏–≤–µ—Ä–∞ 100–ª –∞—Ä—Ç–∏–∫—É–ª SCM-6066-71\n",
      "‚ú® Normalized_Name: –∫–æ–º–ø—Ä–µ—Å—Å–æ—Ä –ø–æ—Ä—à–Ω–µ–≤–æ–π 10-0-–ê—Ç–º –æ–±—ä—ë–º —Ä–µ—Å–∏–≤–µ—Ä 100-0-–ê—Ä—Ç–∏–∫—É–ª scm-<num>-<num\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (2):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 10.0 –ê\n",
      "   2. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 100.0 –ê\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: 10-0-–ê—Ç–º\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: 100-0-–ê—Ä—Ç–∏–∫—É–ª\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 8: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Å–µ–≤–æ–π –¥–∏–∞–º–µ—Ç—Ä 300–º–º —Ä–∞—Å—Ö–æ–¥ 1000–º3/—á –∫—Ä—É–≥–ª—ã–π\n",
      "üßπ Cleaned_Name:    –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Å–µ–≤–æ–π –¥–∏–∞–º–µ—Ç—Ä 300–º–º —Ä–∞—Å—Ö–æ–¥ 1000–º3/—á –∫—Ä—É–≥–ª—ã–π\n",
      "üìö Lemmatized_Name: –í–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Å–µ–≤–æ–π –¥–∏–∞–º–µ—Ç—Ä 300–º–º —Ä–∞—Å—Ö–æ–¥ 1000–º3/—á –∫—Ä—É–≥–ª—ã–π\n",
      "‚ú® Normalized_Name: –≤–µ–Ω—Ç–∏–ª—è—Ç–æ—Ä –æ—Å–µ–≤–æ–π –¥–∏–∞–º–µ—Ç—Ä 300-0-–º–º —Ä–∞—Å—Ö–æ–¥ num –º3-0-—Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (2):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 300.0 –º–º\n",
      "   2. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 3.0 –∫\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: 300-0-–º–º\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: –º3-0-–∫—Ä—É–≥–ª—ã–π\n",
      "\n",
      "üîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (1):\n",
      "   1. '–∫—Ä—É–≥–ª—ã–π' ‚Üí '—Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏–π'\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 9: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ú—É—Ñ—Ç–∞ —É–ø—Ä—É–≥–∞—è –ú–£–í–ü –¥–∏–∞–º–µ—Ç—Ä 125–º–º —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è\n",
      "üßπ Cleaned_Name:    –ú—É—Ñ—Ç–∞ —É–ø—Ä—É–≥–∞—è –ú–£–í–ü –¥–∏–∞–º–µ—Ç—Ä 125–º–º —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è\n",
      "üìö Lemmatized_Name: –ú—É—Ñ—Ç–∞ —É–ø—Ä—É–≥–∞—è –ú–£–í–ü –¥–∏–∞–º–µ—Ç—Ä 125–º–º —Å–æ–µ–¥–∏–Ω—è—é—â–∞—è\n",
      "‚ú® Normalized_Name: –≤—Ç—É–ª–∫–∞ —É–ø—Ä—É–≥–∏–π –º—É–≤–ø –¥–∏–∞–º–µ—Ç—Ä 125-0-–º–º —Å–æ–µ–¥–∏–Ω—è—Ç—å\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 125.0 –º–º\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (1):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: 125-0-–º–º\n",
      "\n",
      "üîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ (1):\n",
      "   1. '–º—É—Ñ—Ç–∞' ‚Üí '–≤—Ç—É–ª–∫–∞'\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 10: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ—Ä–º–æ–ø–∞—Ä–Ω—ã–π 0-1000¬∞C –ø–æ –ì–û–°–¢ –† 52857-2007\n",
      "üßπ Cleaned_Name:    –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ—Ä–º–æ–ø–∞—Ä–Ω—ã–π 0-1000¬∞C –ø–æ –ì–û–°–¢ –† 52857-2007\n",
      "üìö Lemmatized_Name: –î–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã —Ç–µ—Ä–º–æ–ø–∞—Ä–Ω—ã–π 0-1000¬∞C –ø–æ –ì–û–°–¢ –† 52857-2007\n",
      "‚ú® Normalized_Name: –¥–∞—Ç—á–∏–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ —Ç–µ—Ä–º–æ–ø–∞—Ä–Ω—ã–π num>-<num –≥–û–°–¢ num>-<num\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (1):\n",
      "   1. –û–°–¢: –û–°–¢ num\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 12: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –ë–æ–ª—Ç –ú10—Ö50 DIN 912 —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–º —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –ø–æ–¥ –∫–ª—é—á\n",
      "üßπ Cleaned_Name:    –ë–æ–ª—Ç –ú10—Ö50 DIN 912 —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–º —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –ø–æ–¥ –∫–ª—é—á\n",
      "üìö Lemmatized_Name: –ë–æ–ª—Ç –ú10—Ö50 DIN 912 —Å —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–º —É–≥–ª—É–±–ª–µ–Ω–∏–µ–º –ø–æ–¥ –∫–ª—é—á\n",
      "‚ú® Normalized_Name: –±–æ–ª—Ç –º10√ó50-din num —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω—ã–º —É–≥–ª—É–±–ª–µ–Ω–∏–µ –∫–ª—é—á\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. —Ä–∞–∑–º–µ—Ä—ã_2d: 10.0√ó50.0 –º–º\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (3):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª_—Å–ª–æ–∂–Ω—ã–π: –º10√ó50\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: –º10\n",
      "   3. –∞—Ä—Ç–∏–∫—É–ª: 50-din\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 13: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π 7,5–∫–í—Ç 3000–æ–±/–º–∏–Ω\n",
      "üßπ Cleaned_Name:    –≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π 7,5–∫–í—Ç 3000–æ–±/–º–∏–Ω\n",
      "üìö Lemmatized_Name: –≠–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π 7,5–∫–í—Ç 3000–æ–±/–º–∏–Ω\n",
      "‚ú® Normalized_Name: —ç–ª–µ–∫—Ç—Ä–æ–¥–≤–∏–≥–∞—Ç–µ–ª—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ç—Ä–µ—Ö—Ñ–∞–∑–Ω—ã–π 7-5-–∫–≤—Ç num –º–∏–Ω\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 7.5 –∫–≤—Ç\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (1):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: 7-5-–∫–≤—Ç\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 14: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –±–µ—Å—à–æ–≤–Ω–∞—è 89—Ö8–º–º –¥–ª–∏–Ω–∞ 6–º –ì–û–°–¢ 8732-78\n",
      "üßπ Cleaned_Name:    –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –±–µ—Å—à–æ–≤–Ω–∞—è 89—Ö8–º–º –¥–ª–∏–Ω–∞ 6–º –ì–û–°–¢ 8732-78\n",
      "üìö Lemmatized_Name: –¢—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è –±–µ—Å—à–æ–≤–Ω–∞—è 89—Ö8–º–º –¥–ª–∏–Ω–∞ 6–º –ì–û–°–¢ 8732-78\n",
      "‚ú® Normalized_Name: —Ç—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–æ–π –±–µ—Å—à–æ–≤–Ω—ã–π num —Ö8-0-–º–º –¥–ª–∏–Ω–∞ –≥–û–°–¢ num>-<num\n",
      "\n",
      "üîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (1):\n",
      "   1. –∏–∑–º–µ—Ä–µ–Ω–∏–µ: 8.0 –º–º\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –û–°–¢: –û–°–¢ num\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: —Ö8-0-–º–º\n",
      "\n",
      "================================================================================\n",
      "üìù –ü–†–ò–ú–ï–† 15: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\n",
      "================================================================================\n",
      "üî∏ Raw_Name:        –§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π DN100 PN10 –ø–æ –¢–£ 2296-001-12345678\n",
      "üßπ Cleaned_Name:    –§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π DN100 PN10 –ø–æ –¢–£ 2296-001-12345678\n",
      "üìö Lemmatized_Name: –§–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π DN100 PN10 –ø–æ –¢–£ 2296-001-12345678\n",
      "‚ú® Normalized_Name: —Ñ–ª–∞–Ω–µ—Ü —Å—Ç–∞–ª—å–Ω–æ–π –ø–ª–æ—Å–∫–∏–π dn100-pn10-num>-<num>-<num\n",
      "\n",
      "üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (2):\n",
      "   1. –∞—Ä—Ç–∏–∫—É–ª: dn100-\n",
      "   2. –∞—Ä—Ç–∏–∫—É–ª: pn10-num\n"
     ]
    }
   ],
   "source": [
    "# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n",
    "def display_processing_example(record: Dict[str, Any], index: int):\n",
    "    \"\"\"–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–∏–º–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏\"\"\"\n",
    "    print(f\"\\n{'='*80}\")\n",
    "    print(f\"üìù –ü–†–ò–ú–ï–† {index + 1}: –î–ï–¢–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê\")\n",
    "    print(f\"{'='*80}\")\n",
    "    \n",
    "    print(f\"üî∏ Raw_Name:        {record['Raw_Name']}\")\n",
    "    print(f\"üßπ Cleaned_Name:    {record['Cleaned_Name']}\")\n",
    "    print(f\"üìö Lemmatized_Name: {record['Lemmatized_Name']}\")\n",
    "    print(f\"‚ú® Normalized_Name: {record['Normalized_Name']}\")\n",
    "    \n",
    "    if record['Extracted_Parameters']:\n",
    "        print(f\"\\nüîß –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ({len(record['Extracted_Parameters'])}):\")\n",
    "        for i, param in enumerate(record['Extracted_Parameters'], 1):\n",
    "            param_str = f\"   {i}. {param.get('type', 'unknown')}: \"\n",
    "            if 'value' in param:\n",
    "                param_str += f\"{param['value']} {param.get('unit', '')}\"\n",
    "            elif 'length' in param:\n",
    "                if 'height' in param:\n",
    "                    param_str += f\"{param['length']}√ó{param['width']}√ó{param['height']} {param.get('unit', '')}\"\n",
    "                else:\n",
    "                    param_str += f\"{param['length']}√ó{param['width']} {param.get('unit', '')}\"\n",
    "            else:\n",
    "                param_str += f\"{param.get('original', 'N/A')}\"\n",
    "            print(param_str)\n",
    "    \n",
    "    if record['Extracted_Codes']:\n",
    "        print(f\"\\nüìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã ({len(record['Extracted_Codes'])}):\")\n",
    "        for i, code in enumerate(record['Extracted_Codes'], 1):\n",
    "            print(f\"   {i}. {code['type']}: {code.get('normalized', code.get('code', 'N/A'))}\")\n",
    "    \n",
    "    if record['Synonym_Replacements']:\n",
    "        print(f\"\\nüîÑ –ó–∞–º–µ–Ω—ã —Å–∏–Ω–æ–Ω–∏–º–æ–≤ ({len(record['Synonym_Replacements'])}):\")\n",
    "        for i, repl in enumerate(record['Synonym_Replacements'], 1):\n",
    "            print(f\"   {i}. '{repl['original']}' ‚Üí '{repl['canonical']}'\")\n",
    "\n",
    "# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–æ–≤\n",
    "interesting_examples = []\n",
    "\n",
    "# –ò—â–µ–º –ø—Ä–∏–º–µ—Ä—ã —Å —Ä–∞–∑–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ —É–ª—É—á—à–µ–Ω–∏–π\n",
    "for i, record in enumerate(results):\n",
    "    if record['Parameters_Count'] > 0 or record['Codes_Count'] > 0 or record['Synonyms_Count'] > 0:\n",
    "        interesting_examples.append((i, record))\n",
    "\n",
    "# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –ø—Ä–∏–º–µ—Ä–∞\n",
    "for i, (idx, record) in enumerate(interesting_examples):\n",
    "    display_processing_example(record, idx)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üíæ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: processed_product_names.csv\n",
      "üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: processed_product_names_detailed.xlsx\n",
      "   ‚Ä¢ –õ–∏—Å—Ç 'Main_Table': –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å 4 –ø–æ–ª—è–º–∏\n",
      "   ‚Ä¢ –õ–∏—Å—Ç 'Extended_Table': —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n",
      "   ‚Ä¢ –õ–∏—Å—Ç 'Statistics': –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\n",
      "   ‚Ä¢ –õ–∏—Å—Ç 'Parameters_Details': –¥–µ—Ç–∞–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n"
     ]
    }
   ],
   "source": [
    "# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ CSV\n",
    "output_file_main = \"processed_product_names.csv\"\n",
    "df_main.to_csv(output_file_main, index=False, encoding='utf-8')\n",
    "print(f\"üíæ –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file_main}\")\n",
    "\n",
    "# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –≤ Excel —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏\n",
    "output_file_excel = \"processed_product_names_detailed.xlsx\"\n",
    "\n",
    "with pd.ExcelWriter(output_file_excel, engine='openpyxl') as writer:\n",
    "    # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞\n",
    "    df_main.to_excel(writer, sheet_name='Main_Table', index=False)\n",
    "    \n",
    "    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (–±–µ–∑ –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π)\n",
    "    df_display.to_excel(writer, sheet_name='Extended_Table', index=False)\n",
    "    \n",
    "    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n",
    "    summary_stats.to_excel(writer, sheet_name='Statistics', index=False)\n",
    "    \n",
    "    # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞—Ö\n",
    "    params_details = []\n",
    "    for i, record in enumerate(results):\n",
    "        for param in record['Extracted_Parameters']:\n",
    "            params_details.append({\n",
    "                'Row_Index': i + 1,\n",
    "                'Raw_Name': record['Raw_Name'],\n",
    "                'Parameter_Type': param.get('type', 'unknown'),\n",
    "                'Parameter_Value': param.get('value', param.get('length', 'N/A')),\n",
    "                'Parameter_Unit': param.get('unit', ''),\n",
    "                'Original_Text': param.get('original', '')\n",
    "            })\n",
    "    \n",
    "    if params_details:\n",
    "        df_params = pd.DataFrame(params_details)\n",
    "        df_params.to_excel(writer, sheet_name='Parameters_Details', index=False)\n",
    "\n",
    "print(f\"üìä –î–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_file_excel}\")\n",
    "print(f\"   ‚Ä¢ –õ–∏—Å—Ç 'Main_Table': –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å 4 –ø–æ–ª—è–º–∏\")\n",
    "print(f\"   ‚Ä¢ –õ–∏—Å—Ç 'Extended_Table': —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\")\n",
    "print(f\"   ‚Ä¢ –õ–∏—Å—Ç 'Statistics': –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏\")\n",
    "print(f\"   ‚Ä¢ –õ–∏—Å—Ç 'Parameters_Details': –¥–µ—Ç–∞–ª–∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x1000 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: processing_analysis.png\n"
     ]
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª—è\n",
    "plt.style.use('default')\n",
    "sns.set_palette(\"husl\")\n",
    "\n",
    "# –°–æ–∑–¥–∞–µ–º —Ñ–∏–≥—É—Ä—É —Å –ø–æ–¥–≥—Ä–∞—Ñ–∏–∫–∞–º–∏\n",
    "fig, axes = plt.subplots(2, 2, figsize=(15, 10))\n",
    "fig.suptitle('üìä –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π', fontsize=16, fontweight='bold')\n",
    "\n",
    "# 1. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n",
    "params_counts = [r['Parameters_Count'] for r in results]\n",
    "axes[0, 0].hist(params_counts, bins=range(max(params_counts) + 2), alpha=0.7, color='skyblue', edgecolor='black')\n",
    "axes[0, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')\n",
    "axes[0, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤')\n",
    "axes[0, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π')\n",
    "\n",
    "# 2. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–¥–æ–≤\n",
    "codes_counts = [r['Codes_Count'] for r in results]\n",
    "axes[0, 1].hist(codes_counts, bins=range(max(codes_counts) + 2), alpha=0.7, color='lightgreen', edgecolor='black')\n",
    "axes[0, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤')\n",
    "axes[0, 1].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤')\n",
    "axes[0, 1].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π')\n",
    "\n",
    "# 3. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n",
    "synonyms_counts = [r['Synonyms_Count'] for r in results]\n",
    "axes[1, 0].hist(synonyms_counts, bins=range(max(synonyms_counts) + 2), alpha=0.7, color='salmon', edgecolor='black')\n",
    "axes[1, 0].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–º–µ–Ω —Å–∏–Ω–æ–Ω–∏–º–æ–≤')\n",
    "axes[1, 0].set_xlabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω')\n",
    "axes[1, 0].set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π')\n",
    "\n",
    "# 4. –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (pie chart)\n",
    "labels = ['–ü–∞—Ä–∞–º–µ—Ç—Ä—ã', '–ö–æ–¥—ã', '–°–∏–Ω–æ–Ω–∏–º—ã']\n",
    "sizes = [total_parameters, total_codes, total_synonyms]\n",
    "colors = ['skyblue', 'lightgreen', 'salmon']\n",
    "\n",
    "axes[1, 1].pie(sizes, labels=labels, colors=colors, autopct='%1.1f%%', startangle=90)\n",
    "axes[1, 1].set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏')\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()\n",
    "\n",
    "# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ–∏–∫\n",
    "fig.savefig('processing_analysis.png', dpi=300, bbox_inches='tight')\n",
    "print(\"üìà –ì—Ä–∞—Ñ–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω: processing_analysis.png\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## üéØ –í—ã–≤–æ–¥—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\n",
      "============================================================\n",
      "\n",
      "üìä –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –û–ë–†–ê–ë–û–¢–ö–ò:\n",
      "   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: 100.0%\n",
      "   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: 0.7\n",
      "   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: 1.3\n",
      "   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω —Å–∏–Ω–æ–Ω–∏–º–æ–≤: 0.4\n",
      "\n",
      "‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:\n",
      "   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: 11 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\n",
      "   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤: 20 –∫–æ–¥–æ–≤\n",
      "   ‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤: 6 –∑–∞–º–µ–Ω\n",
      "\n",
      "üéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\n",
      "   ‚Ä¢ –î—Ä–æ–±–Ω—ã–µ –¥—é–π–º—ã (1/2\") –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è\n",
      "   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã (245—Ö10,03) –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n",
      "   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (–ì–û–°–¢, –¢–£) —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—Ç—Å—è\n",
      "   ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã (–∫–∞—É—á—É–∫–æ–≤—ã–π ‚Üí —Ä–µ–∑–∏–Ω–æ–≤—ã–π) –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è\n",
      "   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\n",
      "\n",
      "üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:\n",
      "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ 'Normalized_Name' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤\n",
      "   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 'Extracted_Parameters' –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\n",
      "   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Extracted_Codes' –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏\n",
      "   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞—Ä–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤\n",
      "\n",
      "üìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\n",
      "   ‚Ä¢ processed_product_names.csv - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (CSV)\n",
      "   ‚Ä¢ processed_product_names_detailed.xlsx - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (Excel)\n",
      "   ‚Ä¢ processing_analysis.png - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n",
      "   ‚Ä¢ product_names_processing.ipynb - —ç—Ç–æ—Ç notebook\n"
     ]
    }
   ],
   "source": [
    "print(\"üéØ –í–´–í–û–î–´ –ò –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò\")\n",
    "print(\"=\" * 60)\n",
    "\n",
    "# –ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n",
    "params_per_item = total_parameters / total_records\n",
    "codes_per_item = total_codes / total_records\n",
    "synonyms_per_item = total_synonyms / total_records\n",
    "\n",
    "print(f\"\\nüìä –≠–§–§–ï–ö–¢–ò–í–ù–û–°–¢–¨ –û–ë–†–ê–ë–û–¢–ö–ò:\")\n",
    "print(f\"   ‚Ä¢ –£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {successful_processing/total_records:.1%}\")\n",
    "print(f\"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {params_per_item:.1f}\")\n",
    "print(f\"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤ –Ω–∞ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: {codes_per_item:.1f}\")\n",
    "print(f\"   ‚Ä¢ –°—Ä–µ–¥–Ω–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–º–µ–Ω —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {synonyms_per_item:.1f}\")\n",
    "\n",
    "print(f\"\\n‚úÖ –î–û–°–¢–ò–ì–ù–£–¢–´–ï –£–õ–£–ß–®–ï–ù–ò–Ø:\")\n",
    "if total_parameters > 0:\n",
    "    print(f\"   ‚Ä¢ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤: {total_parameters} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤\")\n",
    "if total_codes > 0:\n",
    "    print(f\"   ‚Ä¢ –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –∫–æ–¥–æ–≤: {total_codes} –∫–æ–¥–æ–≤\")\n",
    "if total_synonyms > 0:\n",
    "    print(f\"   ‚Ä¢ –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏–Ω–æ–Ω–∏–º–æ–≤: {total_synonyms} –∑–∞–º–µ–Ω\")\n",
    "\n",
    "print(f\"\\nüéØ –ö–õ–Æ–ß–ï–í–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:\")\n",
    "print(f\"   ‚Ä¢ –î—Ä–æ–±–Ω—ã–µ –¥—é–π–º—ã (1/2\\\") –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è\")\n",
    "print(f\"   ‚Ä¢ –†–∞–∑–º–µ—Ä—ã (245—Ö10,03) –∏–∑–≤–ª–µ–∫–∞—é—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\")\n",
    "print(f\"   ‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–¥—ã (–ì–û–°–¢, –¢–£) —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É—é—Ç—Å—è\")\n",
    "print(f\"   ‚Ä¢ –°–∏–Ω–æ–Ω–∏–º—ã (–∫–∞—É—á—É–∫–æ–≤—ã–π ‚Üí —Ä–µ–∑–∏–Ω–æ–≤—ã–π) –Ω–æ—Ä–º–∞–ª–∏–∑—É—é—Ç—Å—è\")\n",
    "print(f\"   ‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–æ–ª–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å\")\n",
    "\n",
    "print(f\"\\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –î–õ–Ø –î–ê–õ–¨–ù–ï–ô–®–ï–ì–û –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:\")\n",
    "print(f\"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–ª–µ 'Normalized_Name' –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–Ω–∞–ª–æ–≥–æ–≤\")\n",
    "print(f\"   ‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ 'Extracted_Parameters' –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫\")\n",
    "print(f\"   ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'Extracted_Codes' –¥–ª—è —Å–≤—è–∑–∏ —Å–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º–∏\")\n",
    "print(f\"   ‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–æ –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–ª–æ–≤–∞—Ä–∏ —Å–∏–Ω–æ–Ω–∏–º–æ–≤\")\n",
    "\n",
    "print(f\"\\nüìÅ –°–û–ó–î–ê–ù–ù–´–ï –§–ê–ô–õ–´:\")\n",
    "print(f\"   ‚Ä¢ {output_file_main} - –æ—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (CSV)\")\n",
    "print(f\"   ‚Ä¢ {output_file_excel} - –¥–µ—Ç–∞–ª—å–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ (Excel)\")\n",
    "print(f\"   ‚Ä¢ processing_analysis.png - –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\")\n",
    "print(f\"   ‚Ä¢ product_names_processing.ipynb - —ç—Ç–æ—Ç notebook\")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
