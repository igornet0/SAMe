"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π SAMe —Å–∏—Å—Ç–µ–º—ã
"""

import logging
import asyncio
import time
from typing import Dict, Any, List, Optional
from dataclasses import dataclass

from ..database.optimizations import db_optimizer
from ..models.quantization import model_quantizer, QuantizationConfig, QuantizationType
from ..distributed.processor import distributed_processor, DistributedConfig, ProcessingMode
from ..caching.advanced_cache import advanced_cache, CacheConfig
from ..models.model_manager import get_model_manager

logger = logging.getLogger(__name__)


@dataclass
class OptimizationSuite:
    """–ù–∞–±–æ—Ä –≤—Å–µ—Ö –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π —Å–∏—Å—Ç–µ–º—ã"""
    database_optimized: bool = False
    models_quantized: bool = False
    distributed_processing_enabled: bool = False
    advanced_caching_enabled: bool = False
    total_speedup: float = 1.0
    memory_reduction_percent: float = 0.0


class SAMeOptimizer:
    """–ì–ª–∞–≤–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä SAMe —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.optimization_suite = OptimizationSuite()
        self._performance_baseline = {}
        self._optimization_results = {}
        
    async def run_comprehensive_optimization(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        logger.info("üöÄ Starting comprehensive SAMe system optimization")
        start_time = time.time()
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        baseline = await self._measure_baseline_performance()
        self._performance_baseline = baseline
        
        optimization_results = {}
        
        try:
            # 1. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            logger.info("üìä Phase 1: Database optimization")
            db_result = await self._optimize_database()
            optimization_results['database'] = db_result
            self.optimization_suite.database_optimized = db_result['success']
            
            # 2. –ö–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π
            logger.info("üß† Phase 2: Model quantization")
            model_result = await self._optimize_models()
            optimization_results['models'] = model_result
            self.optimization_suite.models_quantized = model_result['success']
            
            # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            logger.info("‚ö° Phase 3: Distributed processing setup")
            distributed_result = await self._setup_distributed_processing()
            optimization_results['distributed'] = distributed_result
            self.optimization_suite.distributed_processing_enabled = distributed_result['success']
            
            # 4. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info("üíæ Phase 4: Advanced caching setup")
            cache_result = await self._setup_advanced_caching()
            optimization_results['caching'] = cache_result
            self.optimization_suite.advanced_caching_enabled = cache_result['success']
            
            # 5. –ò–∑–º–µ—Ä–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            logger.info("üìà Phase 5: Performance measurement")
            final_performance = await self._measure_optimized_performance()
            optimization_results['performance'] = final_performance
            
            # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–µ —É–ª—É—á—à–µ–Ω–∏—è
            total_improvements = self._calculate_total_improvements(baseline, final_performance)
            self.optimization_suite.total_speedup = total_improvements['speedup']
            self.optimization_suite.memory_reduction_percent = total_improvements['memory_reduction']
            
            total_time = time.time() - start_time
            
            logger.info(f"‚úÖ Comprehensive optimization completed in {total_time:.2f}s")
            logger.info(f"üéØ Total speedup: {self.optimization_suite.total_speedup:.1f}x")
            logger.info(f"üíæ Memory reduction: {self.optimization_suite.memory_reduction_percent:.1f}%")
            
            return {
                'success': True,
                'optimization_suite': self.optimization_suite,
                'results': optimization_results,
                'total_time': total_time,
                'baseline_performance': baseline,
                'optimized_performance': final_performance
            }
            
        except Exception as e:
            logger.error(f"‚ùå Optimization failed: {e}")
            return {
                'success': False,
                'error': str(e),
                'partial_results': optimization_results
            }
    
    async def _measure_baseline_performance(self) -> Dict[str, Any]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã"""
        
        logger.info("Measuring baseline performance...")
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        test_texts = [
            "–±–æ–ª—Ç –º10 –æ—Ü–∏–Ω–∫–æ–≤–∞–Ω–Ω—ã–π",
            "–≥–∞–π–∫–∞ —à–µ—Å—Ç–∏–≥—Ä–∞–Ω–Ω–∞—è –º12",
            "—à–∞–π–±–∞ –ø–ª–æ—Å–∫–∞—è 8–º–º",
            "–≤–∏–Ω—Ç —Å –ø–æ—Ç–∞–π–Ω–æ–π –≥–æ–ª–æ–≤–∫–æ–π –º6",
            "—Ç—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è 57—Ö3.5"
        ] * 20  # 100 —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        
        test_queries = [
            "–±–æ–ª—Ç –º10",
            "–≥–∞–π–∫–∞ –º12",
            "—à–∞–π–±–∞ 8",
            "–≤–∏–Ω—Ç –º6",
            "—Ç—Ä—É–±–∞ —Å—Ç–∞–ª—å–Ω–∞—è"
        ]
        
        baseline = {}
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        from ..text_processing.preprocessor import TextPreprocessor
        preprocessor = TextPreprocessor()
        
        start_time = time.time()
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
            results = []
            for text in test_texts[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
                result = await preprocessor.preprocess_text_async(text)
                results.append(result)
            
            baseline['text_processing_time'] = time.time() - start_time
            baseline['text_processing_success'] = len([r for r in results if r.get('processing_successful', False)])
        except Exception as e:
            logger.warning(f"Text processing baseline failed: {e}")
            baseline['text_processing_time'] = float('inf')
            baseline['text_processing_success'] = 0
        
        # –ò–∑–º–µ—Ä—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
        import psutil
        import os
        process = psutil.Process(os.getpid())
        baseline['memory_usage_mb'] = process.memory_info().rss / 1024 / 1024
        
        # –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
        start_time = time.time()
        try:
            model_manager = get_model_manager()
            await model_manager.get_sentence_transformer()
            baseline['model_loading_time'] = time.time() - start_time
        except Exception as e:
            logger.warning(f"Model loading baseline failed: {e}")
            baseline['model_loading_time'] = float('inf')
        
        logger.info(f"Baseline: {baseline['text_processing_time']:.3f}s text processing, "
                   f"{baseline['memory_usage_mb']:.1f}MB memory")
        
        return baseline
    
    async def _optimize_database(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
            indexes_result = await db_optimizer.create_search_indexes()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ–∏—Å–∫–∞
            test_query = "–±–æ–ª—Ç –º10"
            start_time = time.time()
            search_results = await db_optimizer.optimized_search(test_query, limit=10)
            search_time = time.time() - start_time
            
            return {
                'success': True,
                'indexes_created': indexes_result,
                'test_search_time': search_time,
                'test_results_count': len(search_results)
            }
            
        except Exception as e:
            logger.error(f"Database optimization failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _optimize_models(self) -> Dict[str, Any]:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏ –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π"""
        
        try:
            model_manager = get_model_manager()
            
            # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏–∏
            sentence_transformer = await model_manager.get_sentence_transformer()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é
            quantization_config = QuantizationConfig(
                quantization_type=QuantizationType.DYNAMIC,
                preserve_accuracy=True,
                optimization_level=2
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∫–≤–∞–Ω—Ç–∏–∑–∞—Ç–æ—Ä–∞
            model_quantizer.config = quantization_config
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–≤–∞–Ω—Ç–∏–∑–∞—Ü–∏—é
            quantization_result = await model_quantizer.quantize_sentence_transformer(
                sentence_transformer,
                "sentence_transformer_main"
            )
            
            return {
                'success': True,
                'quantization_result': {
                    'speedup': quantization_result['performance_improvement'],
                    'memory_reduction': quantization_result['memory_reduction'],
                    'accuracy_preserved': quantization_result['accuracy_preserved']
                }
            }
            
        except Exception as e:
            logger.error(f"Model optimization failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _setup_distributed_processing(self) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
        
        try:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            distributed_config = DistributedConfig(
                processing_mode=ProcessingMode.HYBRID,
                max_workers=None,  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                chunk_size=50,
                enable_progress_tracking=True
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
            distributed_processor.config = distributed_config
            distributed_processor._setup_workers()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            test_data = list(range(100))
            
            def simple_processing_function(chunk):
                return [x * 2 for x in chunk]
            
            start_time = time.time()
            results = await distributed_processor.process_batch_distributed(
                test_data,
                simple_processing_function
            )
            processing_time = time.time() - start_time
            
            success_count = sum(1 for r in results if r.success)
            
            return {
                'success': True,
                'test_processing_time': processing_time,
                'test_success_rate': success_count / len(results) if results else 0,
                'workers_configured': distributed_processor.config.max_workers
            }
            
        except Exception as e:
            logger.error(f"Distributed processing setup failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _setup_advanced_caching(self) -> Dict[str, Any]:
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–≥–æ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è"""
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à
            test_key = "test_optimization_key"
            test_value = {"data": "test_optimization_value", "timestamp": time.time()}
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await advanced_cache.set(test_key, test_value)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–∑ –∫—ç—à–∞
            start_time = time.time()
            cached_value = await advanced_cache.get(test_key)
            cache_access_time = time.time() - start_time
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cache_stats = advanced_cache.get_stats()
            
            return {
                'success': cached_value is not None,
                'cache_access_time': cache_access_time,
                'cache_stats': cache_stats
            }
            
        except Exception as e:
            logger.error(f"Advanced caching setup failed: {e}")
            return {
                'success': False,
                'error': str(e)
            }
    
    async def _measure_optimized_performance(self) -> Dict[str, Any]:
        """–ò–∑–º–µ—Ä–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ –∂–µ —Ç–µ—Å—Ç—ã, —á—Ç–æ –∏ –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∏–∑–º–µ—Ä–µ–Ω–∏—è
        return await self._measure_baseline_performance()
    
    def _calculate_total_improvements(
        self, 
        baseline: Dict[str, Any], 
        optimized: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —É–ª—É—á—à–µ–Ω–∏–π"""
        
        improvements = {}
        
        # –í—ã—á–∏—Å–ª—è–µ–º —É—Å–∫–æ—Ä–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–∞
        baseline_time = baseline.get('text_processing_time', 1.0)
        optimized_time = optimized.get('text_processing_time', 1.0)
        
        if optimized_time > 0 and baseline_time > 0:
            improvements['speedup'] = baseline_time / optimized_time
        else:
            improvements['speedup'] = 1.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏
        baseline_memory = baseline.get('memory_usage_mb', 0)
        optimized_memory = optimized.get('memory_usage_mb', 0)
        
        if baseline_memory > 0:
            improvements['memory_reduction'] = ((baseline_memory - optimized_memory) / baseline_memory) * 100
        else:
            improvements['memory_reduction'] = 0.0
        
        return improvements
    
    def get_optimization_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        
        return {
            'optimization_suite': self.optimization_suite,
            'database_optimizer_stats': db_optimizer.get_search_statistics() if hasattr(db_optimizer, 'get_search_statistics') else {},
            'model_quantizer_stats': model_quantizer.get_quantization_summary(),
            'distributed_processor_stats': distributed_processor.get_performance_stats(),
            'advanced_cache_stats': advanced_cache.get_stats()
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞
same_optimizer = SAMeOptimizer()
